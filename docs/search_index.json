[
["intro.html", "My Programming Notes Chapter 1 Introduction", " My Programming Notes Dominic Mullen 2018-12-03 Chapter 1 Introduction These are my notes from my time spent becoming a self-taught software developer. My apologies if some sections are difficult to read - they’re mainly for my own reference and to track my progress. "],
["command-line.html", "Chapter 2 Command Line 2.1 Shortcuts 2.2 Commands 2.3 Piping 2.4 Less 2.5 Grep (globally search a regular expression and print) 2.6 Miscellaneous", " Chapter 2 Command Line These are my notes from the excellent tutorial: Learn Enough Command Line to Be Dangerous! 2.1 Shortcuts ShortCuts Definitions new tab cmd+t close tab cmd+w ^A go the beginning of the command ^E go to the end of the line ^U clear line hold ⌥ + click move to specified spot in line ^L clear previous text ^R search interactively and edit previous commands 2.2 Commands Command Definition echo print strings to screen mkdir create directory cd change directory pwd print working directory crtl+c best for “getting out of trouble” (cancel as a mnemonic) q quits out of text editor windows / man windows clear removes all previous text sleep x puts the terminal to sleep for “x” seconds, processes commands typed during sleep mode afterwards &gt; (redirect operator) use cat + fileName to write contents of a file to a new file &gt;&gt; (append operator) writes output to the end of a file curl download a file from a URL curl -OL cdn.learnenough.com/sonnets.txt !! (bang) re-run previous command !curl (re-run previous curl command) history show previous command history File related Command Definition open opens the argument using the default application cat dumps contents onto the screen, can accept multiple args diff shows differences between two files ls list all files and directories (supports some regex expressions) ls -l lists files in long format with date modified and size ls -rtl lists files in reverse order of modification ls -a show hidden files ls -h adds human readable byte count mv (move) rename a file or directory cp copy a file rm remove a file head/tail show first/last 10 lines of a file wc shows lines, words, and bytes in a file rm -rf delete a directory and all contents recursively 2.3 Piping Piping exists in command line! head sonnets.txt | wc - get head of sonnets.txt then pipe result to wc history | less - pipe history to less for interactive searching example: open -a '/Applications/Microsoft Excel.app' 'Downloads/Utqiagvik_daily_species_counts.csv' 2.4 Less Lets you interactly navigate a file or output. Command | Description ——- | ———– up &amp; down arrow keys | Move up or down one line spacebar | Move forward one page ⌃F | Move forward one page ⌃B | Move back one page G | Move to end of file 1G | Move to beginning of file / | Search file for string /rose n | Move to next search result N | Move to previous search result q | Quit less 2.5 Grep (globally search a regular expression and print) grep is used for simple patterns and basic regular expressions (BREs); egrep can handle extended regular expressions (EREs). See re_format(7) for more informa- tion on regular expressions. fgrep is quicker than both grep and egrep, but can only handle fixed patterns (i.e. it does not interpret regular expressions). Patterns may consist of one or more lines, allowing any of the pattern lines to match a portion of the input. zgrep, zegrep, and zfgrep act like grep, egrep, and fgrep, respectively, but accept input files compressed with the compress(1) or gzip(1) compression utili- ties. Note: It doesn’t work that well (for instance I tried using anchors ^ and $ with no success). Better to use a text editor or another language. 2.6 Miscellaneous Unix refers to a family of operating systems that includes Linux, Android, iOS (iPhone/iPad), and macOS the main exception to the unix family is windows touch foo is commonly used to create an empty file Use tail -f foo to view a file that’s actively changing Ex. ping learneough.com &gt; learneough.log in one tab and tail -f learneough.log in another tab / is the root directory cd by itself defaults to the home directory cd .. goes up one directory open . opens the current directory in default viewer (finder) cd - goes to the previous directory, whatever it was you can separate commands in one line using ; you can chain commands using &amp;&amp; that run only if the previous call was successful grep -ri folder_name search recursivley through folder "],
["javascript-algorithms-and-data-structures-fcc.html", "Chapter 3 JavaScript Algorithms and Data Structures FCC 3.1 Regex 3.2 Debugging 3.3 Data Structures 3.4 Basic Algorithm Scripting", " Chapter 3 JavaScript Algorithms and Data Structures FCC These are my notes from the JavaScript Algorithms and Data Structures certification from the FreeCodeCamp lessons 3.1 Regex Example using the .test() method - pretty weird syntax with the string as the input. let myString = &quot;freeCodeCamp&quot;; let fccRegex = /freecodecamp/; // Change this line let result = fccRegex.test(myString); .match() extracts matches uses flags: i = case insensitive, g = more than the first match you can put whatever you want in a class: [aeiou] or [a-f], [a-z] etc. lazy matching - finds the smallest part of the string that matches the pattern [] matches alphanumerics, [] matches non alphanumerics [] matches digits, [] is the inverse [] matches all whitespace characters, [] is the inverse ? checks for all or none (think of it as optional) .trim() and .replace() methods exist 3.2 Debugging Overall this wasn’t the most informative section. It mainly focused on common errors rather than debugging techniques. I’ve done quite a bit of debugging though so I’m not exactly sorry that this section was short. Use console.log(typeof variable_name) to return the type. Interestingly this isn’t a function you wrap the object in. OBOE - refers to off by one errors if you access an out range index it undefined is usually the output the following syntax should avoid this for (let i = 0; i &lt; obj.length; i++) 3.3 Data Structures Arrays can store other arrays / JS objects Array.push adds elements to the end. Array.unshift() to the beginning. .pop removes from the end / .shift removes from the beginning Array.slice(0:9) - removes the first 10 elements The third (optional) argument in splice can replace an element. This is a cool example of using it to update a color scheme: function colorChange(arr, index, newColor) { arr.splice(index, 1, newColor); return arr; } let colorScheme = [&#39;#878787&#39;, &#39;#a08794&#39;, &#39;#bb7e8c&#39;, &#39;#c9b6be&#39;, &#39;#d1becf&#39;]; colorScheme = colorChange(colorScheme, 2, &#39;#332327&#39;); // we have removed &#39;#bb7e8c&#39; and added &#39;#332327&#39; in its place // colorScheme now equals [&#39;#878787&#39;, &#39;#a08794&#39;, &#39;#332327&#39;, &#39;#c9b6be&#39;, &#39;#d1becf&#39;] slice extracts array elements but doesn’t modify the original array splice is the same but it removes the selected elements the spread operator ... allows us to copy arrays / insert them into other arrays let thisArray = ['sage', 'rosemary', 'parsley', 'thyme']; let thatArray = ['basil', 'cilantro', ...thisArray, 'coriander']; arr.indexOf('element') returns the index or -1 if it DNE arr.includes() returns a boolean Basic object operations + Use the dot operator to access properties obj.prop1.prop2 etc. + You can also use bracket notation obj[key1][key2] + You can use the delete keyword to remove properties: delete obj.prop1; + Obj.hasOwnProperty(prop) returns a boolean - really useful! + We can iterate through keys in an object: + for (let key in obj) {obj[key]...} + Object.keys(input_obj) returns all the keys in an object. 3.4 Basic Algorithm Scripting I included algorithms because I either found them interesting, learned something new, or found them difficult to puzzle through. 1. Cool reverse way to reverse a string with array methods: function reverseString(str) { return str.split(&#39;&#39;).reverse().join(&#39;&#39;); } 2. Recursion solution to factorial problem: function factorialize(num) { if (num === 0) { return 1; } return num * factorialize(num-1); } 3. Find the longest word in a string, my solution: function findLongestWordLength(str) { let lengths = str.split(&#39; &#39;).map(word =&gt; word.length) return Math.max(...lengths); } 4. Match ‘x’ amount of characters at the end of a string: function confirmEnding(str, target) { return str.slice(str.length - target.length) === target; } 5. My solution to: Title case every word in a string. The key here was remembering that the string method .replace takes regex as an input and then a callback function. I had to use map in order to use replace on every element of the array. function titleCase(str) { return str.toLowerCase().split(&#39; &#39;).map(el =&gt; el.replace(/^.{1}/, letter =&gt; letter.toUpperCase())).join(&#39; &#39;); } 6. Remove all “falsy” values from an array. This method uses the filter function that takes a callback function and filters out values based on true/false output. The Boolean functions returns T/F based on the input. function bouncer(arr) { // Don&#39;t show a false ID to this bouncer. return arr.filter(Boolean) } 7. Check if the all the characters in arr[1] are in arr[0]. My weird solution below. I could have incorporated .indexOf instead of findIndex, and .every which is the same as all in R. function mutation(arr) { let arr0 = arr[0].toLowerCase().split(&#39;&#39;); let arr1 = arr[1].toLowerCase().split(&#39;&#39;); return arr1.map(el =&gt; arr0.findIndex(letter =&gt; el===letter)).includes(-1) ? false : true; } 8. Split an array into groups of size and return then in a two dimensional array. The first solution is mine where I used a bunch of additional counter variables. The second solution is really elegant. It creates a newArr to store results in. The while loop keeps running while there are elements left in arr. Then we push and splice until arr is empty. function chunkArrayInGroups(arr, size) { let newArr = []; let start = 0; let end = size; let numIterations = Math.ceil(arr.length/size); for (let i = 0; i &lt; numIterations; i++) { if (end &gt; arr.length) { newArr[i] = arr.slice(start, arr.length); } else { newArr[i] = arr.slice(start, end); start += size; end += size; } } return newArr; } function chunkArrayInGroups(arr, size) { var newArr = []; while (arr.length) { newArr.push(arr.splice(0,size)); } return newArr; } "],
["responsive-web-design-fcc.html", "Chapter 4 Responsive Web Design FCC 4.1 HTML and HTML5 4.2 CSS 4.3 Applied Visual Design", " Chapter 4 Responsive Web Design FCC These are my notes from the Responsive Web Design certification from the FreeCodeCamp lessons 4.1 HTML and HTML5 Basic structure for each page: &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;!-- metadata elements --&gt; &lt;/head&gt; &lt;body&gt; &lt;!-- page contents --&gt; &lt;/body&gt; &lt;/html&gt; It’s best practice to include an alt tag w/ an image: &lt;img src='' alt='alt text&gt; Anchor element links to other pages &lt;a href=&quot;https://freecodecamp.org&quot;&gt;this links to freecodecamp.org&lt;/a&gt; To create an internal link, you assign a link’s href attribute to a hash symbol # plus the value of the id attribute for the element that you want to internally link to href=&quot;#&quot; to make a placeholder link You can nest an image in an anchor tag to make it a link &lt;input type='text' placeholder='dummy text'&gt; creates a box for user input text Example of a user submission form: &lt;form action=&quot;/submit-cat-photo&quot;&gt; &lt;input type=&quot;text&quot; placeholder=&quot;cat photo URL&quot; required&gt; &lt;button type=&quot;submit&quot;&gt;Submit&lt;/button&gt; &lt;/form&gt; Example of a radio button list: The for attribute allows us to link between the parent input elements &lt;label for=&#39;indoor&#39;&gt; &lt;input id=&#39;indoor&#39; type=&#39;radio&#39; name=&#39;indoor-outdoor&#39;&gt; Indoor &lt;/label&gt; &lt;label for=&#39;outdoor&#39;&gt; &lt;input id=&#39;outdoor&#39; type=&#39;radio&#39; name=&#39;indoor-outdoor&#39;&gt; Outdoor &lt;/label&gt; 4.2 CSS The idea behind CSS is that you can use a selector to target an HTML element in the DOM (Document Object Model) and then apply a variety of attributes to that element to change the way it is displayed on the page. You can apply CSS inline but it’s better to use an external stylesheet. You can also create a &lt;style&gt; block on the .html file but it’s not good practice. Element Ids: Add an id (id='meal-class-1) to an element to style it with that id’s CSS rules. An id is not reusable and should only be applied to one element. An id also has a higher specificity (importance) than a class so if both are applied to the same element and have conflicting styles, the styles of the id will be applied. Inheritance: Child elements inherit properties from their parent elements. Giving an element a class will override any conflicting rules that it inherits from its parent. If an element has multiple classes the last one in the CSS will take precedence. Giving an element a unique Id attribute (ex. #orange-text {color: orange;}) will take precedence over classes / parents. Giving an element inline CSS style (ex. &lt;h1 style='color: white'&gt;Title&lt;/h1&gt;) will take precedence over parent, classes and Ids. The last way that overrides everything is to add !important to a css rule (ex. .pink-text {color: pink !important}). Hexadecimal colors: In CSS, we can use 6 hexadecimal digits to represent colors, two each for the red (R), green (G), and blue (B) components. For example, #000000 is black and is also the lowest possible value. You can shorten this to one digit for each color, for example red = #F00. Instead of using six hexadecimal digits like you do with hex code, with RGB you specify the brightness of each color with a number between 0 and 255: orange - background-color: rgb(255, 165, 0); CSS Variables: CSS Variables are a powerful way to change many CSS style properties at once by changing only one value. To create a CSS Variable, you just need to give it a name with two dashes in front of it and assign it a value like this: --background-variable: orange. After you create your variable, you can assign its value to other CSS properties by referencing the name you gave it: background-color: var(--background-variable). When using your variable as a CSS property value, you can attach a fallback value that your browser will revert to if the given variable is invalid: --background-color: var(--background-variable, black). When you create a variable, it becomes available for you to use inside the element in which you create it. It also becomes available within any elements nested within it. This effect is known as cascading. CSS variables are often created in the :root element so they’re available everywhere throughout the page: :root {--variable: pink}. You can then re-define a variable within a class to overwrite the :root rule. Browser Fallbacks: When your browser parses the CSS of a webpage, it ignores any properties that it doesn’t recognize or support. For example, if you use a CSS variable to assign a background color on a site, Internet Explorer will ignore the background color because it does not support CSS variables. In that case, the browser will use whatever value it has for that property. If it can’t find any other value set for that property, it will revert to the default value, which is typically not ideal. This means that if you do want to provide a browser fallback, it’s as easy as providing another more widely supported value immediately before your declaration. That way an older browser will have something to fall back on, while a newer browser will just interpret whatever declaration comes later in the cascade. Example: .red-box { background: red; /*For older browswers*/ background: var(--red-color); height: 200px; width:200px; } .class . is the class selector # . is the id selector [attr=value] is the attribute selector. Example: [type=&#39;radio&#39;] { margin: 20px 0px 20px 0px; } include google fonts: &lt;link href=&quot;https://fonts.googleapis.com/css?family=Lobster&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot;&gt; we can have the browser choose from a list of fonts depending on which are available: p { font-family: Helvetica, sans-serif; } You can apply multiple classes to one element!!!! width:15px; doesn’t have a space between 15 and px - I think i’ve seen it differently elsewhere? border-radius: 15px; rounds the corners border-radius 50% makes it circular Element Description padding amount of space between the element’s content and it’s border. We can set this in one line (also margin). Ex. padding: 40px 40px 20px 20px (clockwise:top, right, bottom, left) margin controls the amount of space between an element’s border and surrounding elements. If you set a margin to a negative value it will increase the size of the element. 4.3 Applied Visual Design Element Description text-align: align text - left (default), right, center and justify (causes all lines of text except the last line to meet the left and right edges of the line box) width: relative length units (such as em), absolute length units (such as px), or as a percentage of its containing parent element font-weight font-weight: bold; is the same as wrapping text in &lt;strong&gt;&lt;/strong&gt;. Sets how thick or think characters are (ranges in abs values from 100:800 or so, and percentages can be used) text-decoration text-decoration: underline; is the same as wrapping text in &lt;u&gt;&lt;/u&gt; font-style font-style: italic; is the same as wrapping text in &lt;em&gt;&lt;/em&gt; &lt;hr&gt; create a horizontal line (self-closing tag) rgba() add opacity argument. background-color: rgba(45, 45, 45, 0.1) produces a dark gray that is nearly transparent font-size font-size opacity adjusts the transparency. 0 is see through, 1 is opaque. text - transform lowercase, uppercase, capitalize (sentence-casing), initial, none, inherit (inherit parent props) line-height vertical amount of space between lines float does not actually use position, but sets the float property of an element. Floating elements are removed from the normal flow of a document and pushed to either the left or right of their containing parent element. z-index stack floating elements on top of each other, higher values take precedence margin move a block element horizontally (margin: auto; = center) display choose whether to display as block or inline hsl() Hue (color 0 red, 360 blue), saturation (amount of grey) lightness (amount of white 0 to black 100) linear-gradient() create a color gradient, the first arg specifies which direction the gradient moves. background: linear-gradient(0deg, #CCFFFF, #FFCCCC) background background: url(https://i.imgur.com/MJAkxbh.png); to add an image transform: transform: scale(2) doubles the element size. transform: transform: skewX(30deg); skews along the X-axis (e.g. square to rhombus) transform: transform: rotate(-45deg); rotates an element Box-shadow: Makes the &lt;div&gt; appear likes it’s floating on the page by adding shadow around it. The box-shadow property takes values for offset-x (how far to push the shadow horizontally from the element), offset-y (how far to push the shadow vertically from the element), blur-radius, spread-radius and a color value, in that order. The blur-radius and spread-radius values are optional. /* Multiple shadows with some blur */ box-shadow: 0 10px 20px rgba(0,0,0,0.19), 0 6px 6px rgba(0,0,0,0.23); Psuedo-classes: A pseudo-class is a keyword that can be added to selectors, in order to select a specific state of the element. /* When hovering over an anchor tag, change its color to red */ a:hover { color: red; } Positioning Relative:CSS treats each HTML element as its own box, which is usually referred to as the CSS Box Model. Block-level items automatically start on a new line (think headings, paragraphs, and divs) while inline items sit within surrounding content (like images or spans). The default layout of elements in this way is called the normal flow of a document, but CSS offers the position property to override it. When the position of an element is set to relative, it allows you to specify how CSS should move it relative to its current position in the normal flow of the page. It pairs with the CSS offset properties of left or right, and top or bottom. These say how many pixels, percentages, or ems to move the item away from where it is normally positioned. The following example moves the paragraph 10 pixels away from the bottom: p { /* Relative positions move away from top, bottom, left and right */ position: relative; bottom: 10px; } Absolute: The next option for the CSS position property is absolute, which locks the element in place relative to its parent container. Unlike the relative position, this removes the element from the normal flow of the document, so surrounding items ignore it. The CSS offset properties (top or bottom and left or right) are used to adjust the position. Fixed: locks an element relative to the browser window. Similar to absolute positioning, it’s used with the CSS offset properties and also removes the element from the normal flow of the document. Colors: Red (R), green (G), and blue (B) are called primary colors. Mixing two primary colors creates the secondary colors cyan (G + B), magenta (R + B) and yellow (R + G). Tertiary colors are the result of combining a primary color with one of its secondary color neighbors. For example, red (primary) and yellow (secondary) make orange. HSL () Shapes: Use CSS Styline to create a crescent moon shape: &lt;style&gt; .center { position: absolute; margin: auto; top: 0; right: 0; bottom: 0; left: 0; width: 100px; height: 100px; background-color: transparent; /* Change this to see the initial shape */ border-radius: 50%; box-shadow: 25px 10px 0px 0px blue; } &lt;/style&gt; &lt;div class=&quot;center&quot;&gt;&lt;/div&gt; Pseudo-elements: ::before and ::after pseudo-elements to function properly, they must have a defined content property. This property is usually used to add things like a photo or text to the selected element. When the ::before and ::after pseudo-elements are used to make shapes, the content property is still required, but it’s set to an empty string. 4.3.1 Animation: The animation properties control how the animation should behave and the @keyframes rule controls what happens during that animation. animation-name sets the name of the animation, which is later used by @keyframes to tell CSS which rules go with which animations; it uses percentages similarly to frames. 0% is at the beginning and 100% is at the end. Change the background color from blue to yellow in 3 seconds: #anim { animation-name: colorful; animation-duration: 3s; } @keyframes colorful { 0% { background-color: blue; } 100% { background-color: yellow; } } &lt;style&gt; button { border-radius: 5px; color: white; background-color: #0F5897; padding: 5px 10px 8px 10px; } button:hover { animation-name: background-color; animation-duration: 500ms; /* add your code below this line */ animation-fill-mode: forwards; /* add your code above this line */ } @keyframes background-color { 100% { background-color: #4791d0; } } &lt;/style&gt; &lt;button&gt;Register&lt;/button&gt; Animation Properties and Effects: Animation Property | Explanation ——————– | ————————————————- animation-name | name is referred to in @keyframes to link them animation-duration | animation-duration: 1s; animation-iteration-count | number of iterations (can be set to infinite) animation-timing-function | controls the speed at various point of the animation. linear is constant. animation-timinig-function: ease-in; is slow at the beginning and speeds up. Some animation effects: Animation Effect | Explanation ———- | ——————————————————————- opacity | make an element fade in and out Cubic-bezier function: In CSS animations, Bezier curves are used with the cubic-bezier function. The shape of the curve represents how the animation plays out. The curve lives on a 1 by 1 coordinate system. The X-axis of this coordinate system is the duration of the animation (think of it as a time scale), and the Y-axis is the change in the animation. The cubic-bezier function consists of four main points that sit on this 1 by 1 grid: p0, p1, p2, and p3. p0 and p3 are set for you - they are the beginning and end points which are always located respectively at the origin (0, 0) and (1, 1). You set the x and y values for the other two points, and where you place them in the grid dictates the shape of the curve for the animation to follow. This is done in CSS by declaring the x and y values of the p1 and p2 “anchor” points in the form: (x1, y1, x2, y2). Pulling it all together, here’s an example of a Bezier curve in CSS code: /* Equivalent to the &quot;linear&quot; keyword */ animation-timing-function: cubic-bezier(0.25, 0.25, 0.75, 0.75); "]
]
