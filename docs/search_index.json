[
["index.html", "My Programming Notes Introduction", " My Programming Notes Dominic Mullen 2018-12-20 Introduction These are my notes from my time spent becoming a self-taught software developer. My apologies if some sections are difficult to read - they’re mainly for my own reference and to track my progress. "],
["command-line.html", "Chapter 1 Command Line 1.1 Shortcuts 1.2 Commands 1.3 Piping 1.4 Less 1.5 Grep (globally search a regular expression and print) 1.6 Miscellaneous", " Chapter 1 Command Line These are my notes from the excellent tutorial: Learn Enough Command Line to Be Dangerous! 1.1 Shortcuts ShortCuts Definitions new tab cmd+t close tab cmd+w ^A go the beginning of the command ^E go to the end of the line ^U clear line hold ⌥ + click move to specified spot in line ^L clear previous text ^R search interactively and edit previous commands 1.2 Commands Command Definition echo print strings to screen mkdir create directory cd change directory pwd print working directory crtl+c best for “getting out of trouble” (cancel as a mnemonic) q quits out of text editor windows / man windows clear removes all previous text sleep x puts the terminal to sleep for “x” seconds, processes commands typed during sleep mode afterwards &gt; (redirect operator) use cat + fileName to write contents of a file to a new file &gt;&gt; (append operator) writes output to the end of a file curl download a file from a URL curl -OL cdn.learnenough.com/sonnets.txt !! (bang) re-run previous command !curl (re-run previous curl command) history show previous command history File related Command Definition open opens the argument using the default application cat dumps contents onto the screen, can accept multiple args diff shows differences between two files ls list all files and directories (supports some regex expressions) ls -l lists files in long format with date modified and size ls -rtl lists files in reverse order of modification ls -a show hidden files ls -h adds human readable byte count mv (move) rename a file or directory cp copy a file rm remove a file head/tail show first/last 10 lines of a file wc shows lines, words, and bytes in a file rm -rf delete a directory and all contents recursively 1.3 Piping Piping exists in command line! head sonnets.txt | wc - get head of sonnets.txt then pipe result to wc history | less - pipe history to less for interactive searching example: open -a '/Applications/Microsoft Excel.app' 'Downloads/Utqiagvik_daily_species_counts.csv' 1.4 Less Lets you interactly navigate a file or output. Command | Description ——- | ———– up &amp; down arrow keys | Move up or down one line spacebar | Move forward one page ⌃F | Move forward one page ⌃B | Move back one page G | Move to end of file 1G | Move to beginning of file / | Search file for string /rose n | Move to next search result N | Move to previous search result q | Quit less 1.5 Grep (globally search a regular expression and print) grep is used for simple patterns and basic regular expressions (BREs); egrep can handle extended regular expressions (EREs). See re_format(7) for more informa- tion on regular expressions. fgrep is quicker than both grep and egrep, but can only handle fixed patterns (i.e. it does not interpret regular expressions). Patterns may consist of one or more lines, allowing any of the pattern lines to match a portion of the input. zgrep, zegrep, and zfgrep act like grep, egrep, and fgrep, respectively, but accept input files compressed with the compress(1) or gzip(1) compression utili- ties. Note: It doesn’t work that well (for instance I tried using anchors ^ and $ with no success). Better to use a text editor or another language. 1.6 Miscellaneous Unix refers to a family of operating systems that includes Linux, Android, iOS (iPhone/iPad), and macOS the main exception to the unix family is windows touch foo is commonly used to create an empty file Use tail -f foo to view a file that’s actively changing Ex. ping learneough.com &gt; learneough.log in one tab and tail -f learneough.log in another tab / is the root directory cd by itself defaults to the home directory cd .. goes up one directory open . opens the current directory in default viewer (finder) cd - goes to the previous directory, whatever it was you can separate commands in one line using ; you can chain commands using &amp;&amp; that run only if the previous call was successful grep -ri folder_name search recursivley through folder "],
["javascript-algorithms-and-data-structures-fcc.html", "Chapter 2 JavaScript Algorithms and Data Structures FCC 2.1 ES6 2.2 Regex 2.3 Debugging 2.4 Data Structures 2.5 Basic Algorithm Scripting 2.6 Object Oriented Programming 2.7 Functional Programming Challenges 2.8 Intermediate Algorithm Scripting 2.9 Project 1: Palindrome checker 2.10 Project 2: Roman Numerals 2.11 Project 3: Caesar’s Cipher 2.12 Project 4: Telephone Number Validator 2.13 Project 5: Cash Register", " Chapter 2 JavaScript Algorithms and Data Structures FCC These are my notes from the JavaScript Algorithms and Data Structures certification from the FreeCodeCamp lessons 2.1 ES6 Arrow function defintion syntax: let printAandB = (a, b) =&gt; { console.log(`${a} = a and ${b} = b`); } 2.1.1 Destructuring objects We can use destructing to assign variables as well. var voxel = {x: 3.6, y: 7.4, z: 6.54 }; var x = voxel.x; // x = 3.6 var y = voxel.y; // y = 7.4 var z = voxel.z; // z = 6.54 is equivalent to const { x, y, z } = voxel; // x = 3.6, y = 7.4, z = 6.54 in ES6. If instead you want to store the values of voxel.x into a, voxel.y into b, and voxel.z into c, you have that freedom as well. const { x : a, y : b, z : c } = voxel // a = 3.6, b = 7.4, c = 6.54 We can also assign variables from arrays using the following syntax: const [a, b,,, c] = [1, 2, 3, 4, 5, 6]; console.log(a, b, c); // 1, 2, 5 We can also use destructuring similarly to slice const [a, b, ...arr] = [1, 2, 3, 4, 5, 7]; console.log(a, b); // 1, 2 console.log(arr); // [3, 4, 5, 7] We can also destructure objects passed into functions as arguments: const profileUpdate = (profileData) =&gt; { const { name, age, nationality, location } = profileData; // do something with these variables } 2.1.2 Getters and Setters Getter functions are meant to simply return (get) the value of an object’s private variable to the user without the user directly accessing the private variable. Setter functions are meant to modify (set) the value of an object’s private variable based on the value passed into the setter function. This change could involve calculations, or even overwriting the previous value completely. class Book { constructor(author) { this._author = author; } // getter get writer(){ return this._author; } // setter set writer(updatedAuthor){ this._author = updatedAuthor; } } const lol = new Book(&#39;anonymous&#39;); console.log(lol.writer); // anonymous lol.writer = &#39;wut&#39;; console.log(lol.writer); // wut Notice the syntax we are using to invoke the getter and setter - as if they are not even functions.Getters and setters are important, because they hide internal implementation details. 2.1.3 charAt Strings are immuatable - the best way I’ve seen to modify a string is to create a new and use the .charAt and .splice methods after = after.charAt(0).toUpperCase()+after.slice(1); 2.1.4 charCodeAt The string method charCodeAt returns the ASCII character encoding at a given index in a string. Below is a useful way of mapping all of the encodings to an array. str.split(&#39;&#39;).map(el =&gt; el.charCodeAt(0)) 2.2 Regex Example using the .test() method - pretty weird syntax with the string as the input. let myString = &quot;freeCodeCamp&quot;; let fccRegex = /freecodecamp/; // Change this line let result = fccRegex.test(myString); .match() extracts matches uses flags: i = case insensitive, g = more than the first match you can put whatever you want in a class: [aeiou] or [a-f], [a-z] etc. lazy matching - finds the smallest part of the string that matches the pattern [\\w] matches alphanumerics, [\\W] matches non alphanumerics [\\d] matches digits, [\\D] is the inverse [\\s] matches all whitespace characters, [\\S] is the inverse ? checks for all or none (think of it as optional) .trim() and .replace() methods exist Add a ^ symbol to a class for NOT. ex. not vowels: [^aeiou] If you need to pass a variable to create a regex expression use: var regex = new RegExp(variable, &quot;i&quot;) 2.2.1 lookaheads We can use lookaheads that only match after the initial pattern is matched. This example matches a group of letters of any length followed by an uppercase letter. var x = &#39;AllThe-small Things&#39; x.split(/(.*[a-z])(?=[A-Z])/) 2.2.2 replace The string object .replace method can used to mutate strings. It’s useful using regex expressions with parentheses. The following expression matches a lowercase letter followed by an uppercase, then replaces it with a space inserted between them. $1 refers to the first () and $2 refers to the second pair. var str = &#39;AllThe-small Things&#39; str.replace(/([a-z])([A-Z])/g, &#39;$1 $2&#39;); 2.3 Debugging Overall this wasn’t the most informative section. It mainly focused on common errors rather than debugging techniques. I’ve done quite a bit of debugging though so I’m not exactly sorry that this section was short. Use console.log(typeof variable_name) to return the type. Interestingly this isn’t a function you wrap the object in. OBOE - refers to off by one errors if you access an out range index it undefined is usually the output the following syntax should avoid this for (let i = 0; i &lt; obj.length; i++) 2.4 Data Structures Arrays can store other arrays / JS objects Array.push adds elements to the end. Array.unshift() to the beginning. .pop removes from the end / .shift removes from the beginning Array.slice(0:9) - removes the first 10 elements The third (optional) argument in splice can replace an element. This is a cool example of using it to update a color scheme: function colorChange(arr, index, newColor) { arr.splice(index, 1, newColor); return arr; } let colorScheme = [&#39;#878787&#39;, &#39;#a08794&#39;, &#39;#bb7e8c&#39;, &#39;#c9b6be&#39;, &#39;#d1becf&#39;]; colorScheme = colorChange(colorScheme, 2, &#39;#332327&#39;); // we have removed &#39;#bb7e8c&#39; and added &#39;#332327&#39; in its place // colorScheme now equals [&#39;#878787&#39;, &#39;#a08794&#39;, &#39;#332327&#39;, &#39;#c9b6be&#39;, &#39;#d1becf&#39;] slice extracts array elements but doesn’t modify the original array splice is the same but it removes the selected elements the spread operator ... allows us to copy arrays / insert them into other arrays let thisArray = ['sage', 'rosemary', 'parsley', 'thyme']; let thatArray = ['basil', 'cilantro', ...thisArray, 'coriander']; arr.indexOf('element') returns the index or -1 if it DNE arr.includes() returns a boolean Basic object operations + Use the dot operator to access properties obj.prop1.prop2 etc. + You can also use bracket notation obj[key1][key2] + You can use the delete keyword to remove properties: delete obj.prop1; + Obj.hasOwnProperty(prop) returns a boolean - really useful! + We can iterate through keys in an object: + for (let key in obj) {obj[key]...} + Object.keys(input_obj) returns all the keys in an object. 2.5 Basic Algorithm Scripting I included algorithms because I either found them interesting, learned something new, or found them difficult to puzzle through. 1. Cool reverse way to reverse a string with array methods: function reverseString(str) { return str.split(&#39;&#39;).reverse().join(&#39;&#39;); } 2. Recursion solution to factorial problem: function factorialize(num) { if (num === 0) { return 1; } return num * factorialize(num-1); } 3. Find the longest word in a string, my solution: function findLongestWordLength(str) { let lengths = str.split(&#39; &#39;).map(word =&gt; word.length) return Math.max(...lengths); } 4. Match ‘x’ amount of characters at the end of a string: function confirmEnding(str, target) { return str.slice(str.length - target.length) === target; } 5. My solution to: Title case every word in a string. The key here was remembering that the string method .replace takes regex as an input and then a callback function. I had to use map in order to use replace on every element of the array. function titleCase(str) { return str.toLowerCase().split(&#39; &#39;).map(el =&gt; el.replace(/^.{1}/, letter =&gt; letter.toUpperCase())).join(&#39; &#39;); } 6. Remove all “falsy” values from an array. This method uses the filter function that takes a callback function and filters out values based on true/false output. The Boolean functions returns T/F based on the input. function bouncer(arr) { // Don&#39;t show a false ID to this bouncer. return arr.filter(Boolean) } 7. Check if the all the characters in arr[1] are in arr[0]. My weird solution below. I could have incorporated .indexOf instead of findIndex, and .every which is the same as all in R. function mutation(arr) { let arr0 = arr[0].toLowerCase().split(&#39;&#39;); let arr1 = arr[1].toLowerCase().split(&#39;&#39;); return arr1.map(el =&gt; arr0.findIndex(letter =&gt; el===letter)).includes(-1) ? false : true; } 8. Split an array into groups of size and return then in a two dimensional array. The first solution is mine where I used a bunch of additional counter variables. The second solution is really elegant. It creates a newArr to store results in. The while loop keeps running while there are elements left in arr. Then we push and splice until arr is empty. function chunkArrayInGroups(arr, size) { let newArr = []; let start = 0; let end = size; let numIterations = Math.ceil(arr.length/size); for (let i = 0; i &lt; numIterations; i++) { if (end &gt; arr.length) { newArr[i] = arr.slice(start, arr.length); } else { newArr[i] = arr.slice(start, end); start += size; end += size; } } return newArr; } function chunkArrayInGroups(arr, size) { var newArr = []; while (arr.length) { newArr.push(arr.splice(0,size)); } return newArr; } 2.6 Object Oriented Programming The software development process first defines a problem, then presents a solution. Object oriented programming is one of several major approaches to the software development process. As its name implies, object oriented programming organizes code into object definitions. These are sometimes called classes, and they group together data with related behavior. The data is an object’s attributes, and the behavior (or functions) are methods. object declaration: ``let object = {property: &quot;value&quot;} access properties with the dot operator: object.property add a method to an object let dog = { name: &quot;Spot&quot;, numLegs: 4, sayLegs: function() {return `This dog has ${this.numLegs} legs.`} }; Create a class constructor: function Dog(name, color) { this.name = name; this.color = color; this.numLegs = 4; } check that a variable is of a Class using variable instanceOf class; own properties are defined directly on an object (not inherited) You can loop through an objects properties (AND prototype properties): for (let property in object){} prototype is an object shared among all instance of a class we can modify the prototype directly with: Dog.prototype.numLegs = 4; we can check if the constructor is of a specific class: let joinDogFraternity = (candidate) =&gt; { return candidate.constructor === Dog ? true : false; } Set methods in the prototype. Also includes shorthand method definitions: when manually setting the prototype of an object it deletes the constructor. Remember to include the constructor property in the prototype. function Dog(name) { this.name = name; } Dog.prototype = { numLegs: 4, eat() { console.log(&#39;nom nom nom&#39;); }, describe() { console.log(`My name is ${this.name}`); } }; isProtoTypeOf method: function Dog(name) { this.name = name; } let beagle = new Dog(&quot;Snoopy&quot;); Dog.prototype.isPrototypeOf(beagle); using inheritance means you won’t repeat yourself (DRY) superType = parent this is the same as using the new operator: let animal = Object.create(Animal.prototype); Object.create(obj) creates a new object, and sets obj as the new object’s prototype subtype = child set the prototype of the subtype (or child)—in this case, Bird—to be an instance of Animal: Bird.prototype = Object.create(Animal.prototype); When an object inherits its prototype from another object, it also inherits the supertype’s constructor property. You need to reset the constructor property manually: Bird.prototype.constructor = Bird; We can overwrite a prototype method by using the same name. Mixin a generic function we can use to give unrelated objects methods let bird = { name: &quot;Donald&quot;, numLegs: 2 }; let boat = { name: &quot;Warrior&quot;, type: &quot;race-boat&quot; }; // Create a Mixin function let glideMixin = function(obj) { obj.glide = function() { console.log(&#39;gliding!&#39;); } }; glideMixin(bird); glideMixin(boat); bird.glide(); Use Closures to create private variables: We can make properties private by creating a variable within the constructor function. The scope of the variable is now in the constructor function -&gt; so the variable can only be accessed or changed by methods within the constructor function. function Bird() { let weight = 15; this.getWeight = function() {//publicly available method return weight; } } Use an IIFE to create a module: Note that you have an immediately invoked function expression (IIFE) that returns an object motionModule. This returned object contains all of the mixin behaviors as properties of the object. The advantage of the module pattern is that all of the motion behaviors can be packaged into a single object that can then be used by other parts of your code. Here is an example using it: let motionModule = (function () { return { glideMixin: function (obj) { obj.glide = function() { console.log(&quot;Gliding on the water&quot;); }; }, flyMixin: function(obj) { obj.fly = function() { console.log(&quot;Flying, wooosh!&quot;); }; } } }) (); // The two parentheses cause the function to be immediately invoked motionModule.glideMixin(duck); duck.glide(); 2.7 Functional Programming Challenges Functional programming is an approach to software development based around the evaluation of functions. Like mathematics, functions in programming map input to output to produce a result. You can combine basic functions in many ways to build more and more complex programs. The functional programming software development approach breaks a program into small, testable parts. This section covers basic functional programming principles in JavaScript. Callbacks are the functions that are slipped or passed into another function to decide the invocation of that function. Functions that can be assigned to a variable, passed into another function, or returned from another function just like any other normal value, are called first class functions. In JavaScript, all functions are first class functions. The functions that take a function as an argument, or return a function as a return value are called higher order functions. When the functions are passed in to another function or returned from another function, then those functions which gets passed in or returned can be called a lambda. Example of these principles: const prepareGreenTea = () =&gt; &#39;greenTea&#39;; const prepareBlackTea = () =&gt; &#39;blackTea&#39;; const getTea = (prepareTea, numOfCups) =&gt; { const teaCups = []; for(let cups = 1; cups &lt;= numOfCups; cups += 1) { const teaCup = prepareTea(); teaCups.push(teaCup); } return teaCups; }; const tea4GreenTeamFCC = getTea(prepareGreenTea, 27); // const tea4BlackTeamFCC = getTea(prepareBlackTea, 13); // Functional programming follows a few core principles: Functions are independent from the state of the program or global variables. They only depend on the arguments passed into them to make a calculation Functions try to limit any changes to the state of the program and avoid changes to the global objects holding data Functions have minimal side effects in the program Super cool snippet of functional programming with one error: // tabs is an array of titles of each site open within the window var Window = function(tabs) { this.tabs = tabs; // we keep a record of the array inside the object }; // When you join two windows into one window Window.prototype.join = function (otherWindow) { this.tabs = this.tabs.concat(otherWindow.tabs); return this; }; // When you open a new tab at the end Window.prototype.tabOpen = function (tab) { this.tabs.push(&#39;new tab&#39;); // let&#39;s open a new tab for now return this; }; // When you close a tab Window.prototype.tabClose = function (index) { /* the splice call modifies the arry - wrong method to use here */ var tabsBeforeIndex = this.tabs.splice(0, index); // get the tabs before the tab var tabsAfterIndex = this.tabs.splice(index); // get the tabs after the tab this.tabs = tabsBeforeIndex.concat(tabsAfterIndex); // join them together return this; }; // Let&#39;s create three browser windows var workWindow = new Window([&#39;GMail&#39;, &#39;Inbox&#39;, &#39;Work mail&#39;, &#39;Docs&#39;, &#39;freeCodeCamp&#39;]); // Your mailbox, drive, and other work sites var socialWindow = new Window([&#39;FB&#39;, &#39;Gitter&#39;, &#39;Reddit&#39;, &#39;Twitter&#39;, &#39;Medium&#39;]); // Social sites var videoWindow = new Window([&#39;Netflix&#39;, &#39;YouTube&#39;, &#39;Vimeo&#39;, &#39;Vine&#39;]); // Entertainment sites // Now perform the tab opening, closing, and other operations var finalTabs = socialWindow .tabOpen() // Open a new tab for cat memes .join(videoWindow.tabClose(2)) // Close third tab in video window, and join .join(workWindow.tabClose(1).tabOpen()); alert(finalTabs.tabs); Add a user-defined map and filter prototypes methods to the global Array object: var s = [23, 65, 98, 5]; Array.prototype.myMap = function(callback){ var newArray = []; for(let i = 0; i &lt; this.length; i++) { newArray.push(callback(this[i])); } // the forEach method also works // this.forEach(a =&gt; newArray.push(callback(a))); return newArray; }; var new_s = s.myMap(function(item){ return item * 2; }); Array.prototype.myFilter = function(callback){ var newArray = []; // Add your code below this line this.forEach(el =&gt; {if (callback(el)) { newArray.push(el); } }); // Add your code above this line return newArray; }; 2.7.1 filter .filter method takes a callback function input and returns elements in a new array if it evaluates to true The following code chunk works, but it won’t work if we wrap {} around the arrown function in .filter. Why is that? var filteredList = watchList.filter(el =&gt; parseInt(el.imdbRating) &gt;= 8).map(el =&gt; {return {title: el.Title, rating: el.imdbRating}}); 2.7.2 concat .concat allows us to push items to the end of an array in a non mutating way. 2.7.3 reduce The array .reduce methods takes simplifies an into an object of length one based on a callback function. The a and b inputs to the function are arr[0] and arr[1] on the first call, then the result of the first call and arr[2] on the second call, etc. var nolan_movies = watchList.filter(el =&gt; el.Director === &#39;Christopher Nolan&#39;); var averageRating = nolan_movies.map(el =&gt; parseFloat(el.imdbRating)).reduce((a, b) =&gt; a + b)/(nolan_movies.length); 2.7.4 Sorting examples Sorting defaults to unicode which converts numbers to characters. We need callback functions to sort numeric values correctly. Sort also mutates the original array. function ascendingOrder(arr) { return arr.sort(function(a, b) { return a - b; }); } ascendingOrder([1, 5, 2, 3, 4]); function reverseAlpha(arr) { return arr.sort(function(a, b) { return a &lt; b; }); } reverseAlpha([&#39;l&#39;, &#39;h&#39;, &#39;z&#39;, &#39;b&#39;, &#39;s&#39;]); 2.7.5 join The array .join('delimiter') method joins elements of an array using a delimiter [&#39;hello&#39;, &#39;world&#39;].join(&#39; &#39;); 2.7.6 every / some The .every method takes a callback function and checks if every value is true. The .some method (any in R) method checks if any applications of the callback function are true Curry and Partial Application: + arity is the number of arguments a function requires + currying a function means converting one function of N arity (arguments) into N functions of arity 1. + partial application can be described as applying a few arguments to a function at a time and returning another function that is applied to more arguments + this basically looks like big nested function calls (pretty weird) function add(x) { return function(y) { return function(z) { return x + y + z; } } } add(10)(20)(30); 2.8 Intermediate Algorithm Scripting Create a range function for an unsorted 2-number array that sums all numbers (inclusive). function sumAll(arr) { var sortedArr = arr.sort((a,b) =&gt; a-b); var firstNum = arr[0]; var lastNum = arr[1]; // Using Arithmetic Progression summing formula var sum = (lastNum - firstNum + 1) * (firstNum + lastNum) / 2; return sum; } Compare two arrays and return a new array with any items only found in one of the two given arrays, but not both. In other words, return the symmetric difference of the two arrays. Could use a nested for loop Could decompose into one array then check for duplicates My solution: function diffArray(arr1, arr2) { return [...arr1, ...arr2].filter(el =&gt; !(arr1.includes(el) &amp;&amp; arr2.includes(el))); } You will be provided with an initial array (the first argument in the destroyer function), followed by one or more arguments. Remove all elements from the initial array that are of the same value as these arguments. solution was required to use the arguments object arguments is not an array and only has the length property we use Array.from to convert arguments to an array. function destroyer(arr) { let destroyers = Array.from(arguments).splice(1); return arguments[0].filter(el =&gt; !(destroyers.includes(el))); } destroyer([1, 2, 3, 1, 2, 3], 2, 3); Translate the provided string to pig latin. Pig Latin takes the first consonant (or consonant cluster) of an English word, moves it to the end of the word and suffixes an “ay”. If a word begins with a vowel you just add “way” to the end. function translatePigLatin(str) { if (str.split(&#39;&#39;)[0].match(/[aeiou]/) !== null) { return str + &#39;way&#39;; } let chars = str.match(/[^aeiou]+/).toString().split(&#39;&#39;); return (str.split(&#39;&#39;).splice(chars.length).join(&#39;&#39;) + chars.join(&#39;&#39;) + &#39;ay&#39;); } translatePigLatin(&quot;consonant&quot;); Convert a string to spinal case. Spinal case is all-lowercase-words-joined-by-dashes. split string on all non alphabet characters join string on dashes Perform a search and replace on the sentence using the arguments provided and return the new sentence. Preserve the case of the first character in the original word when you are replacing it. For example if you mean to replace the word “Book” with the word “dog”, it should be replaced as “Dog”. match pattern and extract (case insensitive regex) if you need to pass a variable to create a regex expression use: var regex = new RegExp(variable, &quot;i&quot;) check for caps using str === str.toLowerCase() if true then replace, if false capitalize then replace function myReplace(str, before, after) { var regex = new RegExp(before, &quot;i&quot;); var out = str.match(regex).toString(); if (out === before.toLowerCase()) { return str.replace(regex, after); } else { let arr = after.split(&#39;&#39;) var firstLetter = arr.shift().toUpperCase(); arr.unshift(firstLetter); var afterCapitalized = arr.join(&#39;&#39;); return str.replace(regex, afterCapitalized); } } myReplace(&quot;A quick brown fox jumped over the lazy dog&quot;, &quot;jumped&quot;, &quot;leaped&quot;); // Cool alternate solution to uppercase matching and string mutations. //Check whether the first letter is uppercase or not if(/[A-Z]/.test(before[0])){ //Change the word to be capitalized after = after.charAt(0).toUpperCase()+after.slice(1); } The DNA strand is missing the pairing element. Take each character, get its pair, and return the results as a 2d array. create a hashmap object with all pairs split string into array, then map to a 2-D array returning each element + its hashmap lookup function pairElement(str) { const hashmap = { A: &#39;T&#39;, T: &#39;A&#39;, C: &#39;G&#39;, G: &#39;C&#39; } let dna = str.split(&#39;&#39;); return dna.map(el =&gt; [el, hashmap[el]]) } pairElement(&quot;GCG&quot;); Find the missing letter in the passed letter range and return it. If all letters are present in the range, return undefined. want to avoid using a for loop decompose the input string to an array loop through each entry, if it matches return true and push the element onto a regex exp when it returns false we return that letter abandoning the above approach ^ find the starting index in the alphabet string by using .findIndex slice the alphabet string from index to str.length compare each value, if false return it // First attempt that didn&#39;t work function fearNotLetter(str) { const alphabet = &quot;abcdefghijklmnopqrstuvwxyz&quot;; let letters = str.split(&#39;&#39;); for (let i=0; i &lt; letters.length; i++) { var regex = new RegExp(letters.slice(0,i+1).join(&#39;&#39;)) if (!alphabet.match(regex)) { return letters[i]; } } return undefined; } fearNotLetter(&quot;abce&quot;); // Second attempt function fearNotLetter(str) { let alphabet = &quot;abcdefghijklmnopqrstuvwxyz&quot;.split(&#39;&#39;); let start = alphabet.findIndex(el =&gt; el === str.charAt(0)); let key = alphabet.slice(start, start + str.length); let letters = str.split(&#39;&#39;); for (let i = 0; i &lt; letters.length; i++) { if (letters[i] !== key[i]) { return key[i]; } } return undefined; } console.log(fearNotLetter(&quot;abce&quot;)); Check if the predicate (second argument) is truthy on all elements of a collection (first argument). In other words, you are given an array collection of objects. The predicate pre will be an object property and you need to return true if its value is truthy. Otherwise, return false. use the Boolean function to convert to true/false select values in object using [] function truthCheck(collection, pre) { return collection.map(el =&gt; Boolean(el[pre])).every(el =&gt; el === true); } truthCheck([{&quot;user&quot;: &quot;Tinky-Winky&quot;, &quot;sex&quot;: &quot;male&quot;}, {&quot;user&quot;: &quot;Dipsy&quot;, &quot;sex&quot;: &quot;male&quot;}, {&quot;user&quot;: &quot;Laa-Laa&quot;, &quot;sex&quot;: &quot;female&quot;}, {&quot;user&quot;: &quot;Po&quot;, &quot;sex&quot;: &quot;female&quot;}], &quot;sex&quot;); Create a function that sums two arguments together. If only one argument is provided, then return a function that expects one argument and returns the sum. For example, addTogether(2, 3) should return 5, and addTogether(2) should return a function. Calling this returned function with a single argument will then return the sum: var sumTwoAnd = addTogether(2); sumTwoAnd(3) returns 5. need to use the arguments object for this if it’s length 2 return the sum if it’s length 1 return a function my solution ended up looking terrible: function addTogether(arg1, arg2) { if (!(typeof arg1 === &#39;number&#39;)) { return undefined; } if (arguments.length === 2) { if (typeof arg2 === &#39;number&#39;) { return arguments[0] + arguments[1]; } else { return undefined; } } if (arguments.length === 1) { return function(y) { if (typeof y === &#39;number&#39;) { return arg1 + y; } else { return undefined; } } } return undefined; } addTogether(2,3); try to improve on it before reading more solutions use a function to check the typeof the args Write a function that takes two or more arrays and returns a new array of unique values in the order of the original provided arrays. the first array always stays the same combine the next arguments into one (here use .splice and .reduce to create one array) if the first array doesn’t contain an argument the .push it into that array. use forEach so we don’t return an array? function uniteUnique() { let unique = arguments[0]; let numbers = Array.from(arguments).splice(1).reduce((a,b) =&gt; [...a, ...b]); console.log(numbers); // see what this looks like numbers.forEach(el =&gt; { if (!(unique.includes(el))) unique.push(el); }) return unique; } uniteUnique([1, 3, 2], [5, 2, 1, 4], [2, 1]); Convert the characters &amp;, &lt;, &gt;, &quot; (double quote), and ’ (apostrophe), in a string to their corresponding HTML entities. create a hashmap then use str.split, map, and join function convertHTML(str) { const hashmap = { &#39;&amp;&#39;: &#39;&amp;amp;&#39;, &#39;&lt;&#39;: &#39;&amp;lt;&#39;, &#39;&gt;&#39;: &#39;&amp;gt;&#39;, &#39;&quot;&#39;: &#39;&amp;quot;&#39;, &quot;&#39;&quot;: &#39;&amp;apos;&#39; } return str.split(&#39;&#39;).map(el =&gt; {return hashmap[el] ? hashmap[el] : el;}).join(&#39;&#39;); } convertHTML(&quot;Dolce &amp; Gabbana&quot;); Given a positive integer num, return the sum of all odd Fibonacci numbers that are less than or equal to num. The first two numbers in the Fibonacci sequence are 1 and 1. Every additional number in the sequence is the sum of the two previous numbers. The first six numbers of the Fibonacci sequence are 1, 1, 2, 3, 5 and 8. create the fibonacci sequence go through and use .reduce() to sum it for odd entries might need to use filter first to get rid of even entries function sumFibs(num) { let arr = [1, 1] while (arr.slice(-1) &lt; num) { arr.push(arr.slice(-2).reduce((a, b) =&gt; a+b)); } arr.slice(-1) &gt; num ? arr.pop() : &#39;do nothing&#39;; return arr.filter(el =&gt; el % 2 !== 0).reduce((a, b) =&gt; a+b); } console.log(sumFibs(15)); Return an English translated sentence of the passed binary string. The binary string will be space separated. split into an array on whitespace convert the binary string to its decimal value using parseInt(, 2) retrieve the ASCII decimal value using the string method: String.fromCharChode() function binaryAgent(str) { return str.split(&#39; &#39;).map(el =&gt; String.fromCharCode(parseInt(el, 2))).join(&#39;&#39;); } console.log(binaryAgent(&quot;01000001 01110010 01100101 01101110 00100111 01110100 00100000 01100010 01101111 01101110 01100110 01101001 01110010 01100101 01110011 00100000 01100110 01110101 01101110 00100001 00111111&quot;)); Given the array arr, iterate through and remove each element starting from the first element (the 0 index) until the function func returns true when the iterated element is passed through it. Then return the rest of the array once the condition is satisfied, otherwise, arr should be returned as an empty array. dropElements([1, 2, 3, 4], function(n) {return n &gt;= 3;}) should return [3, 4] makes sense to use a for loop could also try using filter (doesn’t make sense because we return on the first true) in the for loop I made a OBOE initially because i was checking function(arr[i]) - but if it was false then I shifted off the first element - modifying the input array. Then the next iteration of the loop, arr[1], was actually the third element because the first one was shifted off. used a while loop instead of a for loop function dropElements(arr, func) { while (!func(arr[0])) { arr.shift(); } return arr; } console.log(dropElements([1, 2, 3], function(n) {return n &lt; 3; })); console.log(dropElements([1, 2, 3, 4], function(n) {return n &gt;= 3;})); console.log(dropElements([0, 1, 0, 1], function(n) {return n === 1;})); Fill in the object constructor with the following methods below: getFirstName() getLastName() getFullName() setFirstName(first) setLastName(last) setFullName(firstAndLast). var Person = function(input) { var arr = input.split(&#39; &#39;); // Complete the method below and implement the others similarly this.getFullName = function() { return arr.join(&#39; &#39;); }; this.getFirstName = function() { return arr[0]; }; this.getLastName = function() { return arr[1]; }; this.setFirstName = function(input) { arr[0] = input; }; this.setLastName = function(input) { arr[1] = input; } this.setFullName = function(input) { arr = input.split(&#39; &#39;); } }; var bob = new Person(&#39;Bob Ross&#39;); bob.getFullName(); Return a new array that transforms the elements’ average altitude into their orbital periods (in seconds). The array will contain objects in the format {name: ‘name’, avgAlt: avgAlt}. You can read about orbital periods on Wikipedia. The values should be rounded to the nearest whole number. The body being orbited is Earth. The radius of the earth is 6367.4447 kilometers, and the GM value of earth is 398600.4418 km3s-2. create an obortial period class constructor it takes in the satellites name and avgAlt and returns an object with name and orbital period I could’ve also looped through the array, calculated period for each object, and deleted the avgAlt prop from each one. function orbitalPeriod(arr) { function calculatePeriod(altitude) { var GM = 398600.4418; var earthRadius = 6367.4447; var radius = earthRadius + altitude; return Math.round(2*Math.PI*Math.sqrt(Math.pow(radius, 3)/GM)); } function orbitalPeriod(name, avgAlt) { return {name: name, orbitalPeriod: calculatePeriod(avgAlt)}; } return arr.map(el =&gt; orbitalPeriod(el[&#39;name&#39;], el[&#39;avgAlt&#39;])); } console.log(orbitalPeriod([{name : &quot;sputnik&quot;, avgAlt : 35873.5553}])); Sum all the prime numbers up to and including the provided number. A prime number is defined as a number greater than one and having only two divisors, one and itself. For example, 2 is a prime number because it’s only divisible by one and two. create a sequence from 2:num write isPrime - return TRUE/FALSE, use this in conjunction with .filter use .reduce to sum the remaining array function sumPrimes(num) { var isPrime = function(num) { for (let i = 2; i &lt; num; i++) { if (num%i == 0) { return false; } } return true; } let arr = []; for (let i = 2; i &lt;= num; i++) {arr.push(i)}; return arr.filter(el =&gt; isPrime(el)).reduce((a,b) =&gt; a+b); } console.log(sumPrimes(10)); Find the smallest common multiple of the provided parameters that can be evenly divided by both, as well as by all sequential numbers in the range between these parameters. The range will be an array of two numbers that will not necessarily be in numerical order. For example, if given 1 and 3, find the smallest common multiple of both 1 and 3 that is also evenly divisible by all numbers between 1 and 3. The answer here would be 6. sort array create a sequence from the end of the array to end^factorial Make a function that looks through an array of objects (first argument) and returns an array of all objects that have matching name and value pairs (second argument). Each name and value pair of the source object has to be present in the object from the collection if it is to be included in the returned array. create an array of the keys from the second argument call filter method on collection (start looping through each object) then for each object we call the keys array - use the (every) method to test that each key-value pair is in an object (we could have also used map) - the point is we have two loops with these two methods function whatIsInAName(collection, source) { var keys = Object.keys(source); return collection.filter(obj =&gt; keys.every(key =&gt; obj.hasOwnProperty(key) &amp;&amp; obj[key] === source[key])); } console.log(whatIsInAName([{ first: &quot;Romeo&quot;, last: &quot;Montague&quot; }, { first: &quot;Mercutio&quot;, last: null }, { first: &quot;Tybalt&quot;, last: &quot;Capulet&quot; }], { last: &quot;Capulet&quot; })); console.log(whatIsInAName([{ &quot;apple&quot;: 1, &quot;bat&quot;: 2 }, { &quot;bat&quot;: 2 }, { &quot;apple&quot;: 1, &quot;bat&quot;: 2, &quot;cookie&quot;: 2 }], { &quot;apple&quot;: 1, &quot;bat&quot;: 2 })); 2.9 Project 1: Palindrome checker Return true if the given string is a palindrome. Otherwise, return false. A palindrome is a word or sentence that’s spelled the same way both forward and backward, ignoring punctuation, case, and spacing. check length of the string, remove middle character if it’s odd. (does this apply for strings with spaces?) seems like I should remove whitespace, underscores and periods from the strings. check length of the string for loop solution: start at the front and back of the string using .charAt checking if values are equal, break if they aren’t. function palindrome(str) { let chars = str.replace(/[\\W]|_/g, &quot;&quot;).toLowerCase(); console.log(chars); // for loop solution var out = true; for (let i = 0; i &lt; chars.length/2; i++) { out = chars.charAt(i) === chars.charAt(chars.length-i-1); if (out === false) { break; } } return out; } console.log(palindrome(&quot;eye&quot;)); console.log(palindrome(&quot;1 eye for of 1 eye.&quot;)); console.log(palindrome(&quot;0_0 (: /-\\ :) 0-0&quot;)); console.log(palindrome(&quot;My age is 0, 0 si ega ym.&quot;)); 2.10 Project 2: Roman Numerals Roman Numeral Converter. Convert the given number into a roman numeral. All roman numerals answers should be provided in upper-case. - initially thought of writing four functions: one each of the places: ones, tens, hundreds, and thousands columns. - then I realized the body of these functions would be the same: except for the characters it assigns - we can combine then into one function that takes two inputs: a number (0-9) and a character array of roman numerals or “rules” to assign. function convertToRoman(num) { var numbers = num.toString().split(&#39;&#39;).reverse().map(el =&gt; parseInt(el)); var romanNumerals = [[&#39;I&#39;, &#39;V&#39;, &#39;X&#39;], [&#39;X&#39;, &#39;L&#39;, &#39;C&#39;], [&#39;C&#39;, &#39;D&#39;, &#39;M&#39;], [&#39;M&#39;, &#39;Vbar&#39;, &#39;Xbar&#39;]]; var inputs = []; for (let i = 0; i &lt; numbers.length; i++) { inputs[i] = [numbers[i], romanNumerals[i]]; } var replaceWithRoman = function(num, romanNumerals) { let out; switch(true) { case num == 0: out = &#39;&#39;; break; case num &lt;= 3: out = romanNumerals[0].repeat(num); break; case num == 4: out = romanNumerals[0] + romanNumerals[1]; break; case num &lt;= 8: out = romanNumerals[1] + romanNumerals[0].repeat(num-5); break; case num == 9: out = romanNumerals[0] + romanNumerals[2]; break; } return out; } return inputs.map(el =&gt; replaceWithRoman(el[0], el[1])).reverse().join(&#39;&#39;) } console.log(convertToRoman(36)); console.log(convertToRoman(400)); console.log(convertToRoman(1000)); 2.11 Project 3: Caesar’s Cipher One of the simplest and most widely known ciphers is a Caesar cipher, also known as a shift cipher. In a shift cipher the meanings of the letters are shifted by some set amount. A common modern use is the ROT13 cipher, where the values of the letters are shifted by 13 places. Thus ‘A’ ↔ ‘N’, ‘B’ ↔ ‘O’ and so on. Write a function which takes a ROT13 encoded string as input and returns a decoded string. A is 65 and Z is 90 in ASCII encodings return each characters charCode str.split('').map(el =&gt; el.charCodeAt(0)) decoding algorithm is easy if you write out 65:90 and 65:90 + 13. You see that 65-77 is + 13, and 78-90 is -13. So we just write an if-else statement. function rot13(str) { // LBH QVQ VG! const rot13Decode = function(num) { return (num &lt; 65 || num &gt; 90) ? num : num &lt;= 77 ? num + 13 : num - 13; } let asciiCodes = str.split(&#39;&#39;).map(el =&gt; el.charCodeAt(0)); return asciiCodes.map(el =&gt; String.fromCharCode(rot13Decode(el))).join(&#39;&#39;); } rot13(&quot;SERR PBQR PNZC&quot;); 2.12 Project 4: Telephone Number Validator Return true if the passed string looks like a valid US phone number. The user may fill out the form field any way they choose as long as it has the format of a valid US number. probably need to write a lot of rules check that first character is either a number or a “(” - if not return false created a function that returned true / false for every invalid entry created an array of each function call on the string input tested that every entry in the array was true function telephoneCheck(str) { const testFirstChar = function(str) { let regex = /[\\d]|\\(/; return regex.test(str.charAt(0)); } const testLength = function(str) { return str.length &lt; 10 ? false : true } // if a string contains parentheses, check that they&#39;re pattern: (555) const testParentheses = function(str) { let out = true; var regex = /\\(|\\)/; if (regex.test(str)) { var regex = /\\([\\d]{3}\\)/; out = regex.test(str); } return out; } const countIntegersInStr = function(str) { let regex = /[\\d]/; return str.split(&#39;&#39;).map(el =&gt; regex.test(el)).filter(el =&gt; el === true).length; } const testNumberOfIntegers = function(str) { return countIntegersInStr(str) &gt; 11 ? false : true; } const testCountryCode = function(str) { return (countIntegersInStr(str) === 11) ? (str.charAt(0) == 1) ? true : false : true; } const testSpecialCharacters = function(str) { let regex = /[\\d]|-|\\(|\\)|[\\s]/; return str.split(&#39;&#39;).map(el =&gt; regex.test(el)).every(el =&gt; el === true); } let tests = [testFirstChar(str), testLength(str), testParentheses(str), testNumberOfIntegers(str), testCountryCode(str), testSpecialCharacters(str)]; return tests.every(el =&gt; el === true); } console.log(telephoneCheck(&quot;555-555-5555?&quot;)); 2.13 Project 5: Cash Register Design a cash register drawer function checkCashRegister() that accepts purchase price as the first argument (price), payment as the second argument (cash), and cash-in-drawer (cid) as the third argument. Example input: checkCashRegister(19.5, 20, [[&quot;PENNY&quot;, 1.01], [&quot;NICKEL&quot;, 2.05], [&quot;DIME&quot;, 3.1], [&quot;QUARTER&quot;, 4.25], [&quot;ONE&quot;, 90], [&quot;FIVE&quot;, 55], [&quot;TEN&quot;, 20], [&quot;TWENTY&quot;, 60], [&quot;ONE HUNDRED&quot;, 100]]); "],
["responsive-web-design-fcc.html", "Chapter 3 Responsive Web Design FCC 3.1 HTML and HTML5 3.2 CSS 3.3 Applied Visual Design 3.4 Applied Acessibility 3.5 Responsive Web Design 3.6 CSS Flexbox 3.7 CSS Grid 3.8 Useful Code Snippets: 3.9 Project 1: Build a Tribute Page 3.10 Project 2: Build a Survey Form 3.11 Project 3: Project Landing Page 3.12 Project 4: Technical Documenation 3.13 Bootstrap 3.14 jQuery 3.15 SaSS 3.16 React", " Chapter 3 Responsive Web Design FCC These are my notes from the Responsive Web Design certification from the FreeCodeCamp lessons 3.1 HTML and HTML5 Basic structure for each page: &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;!-- metadata elements --&gt; &lt;/head&gt; &lt;body&gt; &lt;!-- page contents --&gt; &lt;/body&gt; &lt;/html&gt; It’s best practice to include an alt tag w/ an image: &lt;img src='' alt='alt text&gt; Anchor element links to other pages &lt;a href=&quot;https://freecodecamp.org&quot;&gt;this links to freecodecamp.org&lt;/a&gt; To create an internal link, you assign a link’s href attribute to a hash symbol # plus the value of the id attribute for the element that you want to internally link to href=&quot;#&quot; to make a placeholder link You can nest an image in an anchor tag to make it a link &lt;input type='text' placeholder='dummy text'&gt; creates a box for user input text Example of a user submission form: &lt;form action=&quot;/submit-cat-photo&quot;&gt; &lt;input type=&quot;text&quot; placeholder=&quot;cat photo URL&quot; required&gt; &lt;button type=&quot;submit&quot;&gt;Submit&lt;/button&gt; &lt;/form&gt; Example of a radio button list: The for attribute allows us to link between the parent input elements &lt;label for=&#39;indoor&#39;&gt; &lt;input id=&#39;indoor&#39; type=&#39;radio&#39; name=&#39;indoor-outdoor value=&#39;indoor&#39;&gt;Indoor &lt;/label&gt; &lt;label for=&#39;outdoor&#39;&gt; &lt;input id=&#39;outdoor&#39; type=&#39;radio&#39; name=&#39;indoor-outdoor&#39; value=&#39;outdoor&#39;&gt;Outdoor &lt;/label&gt; 3.2 CSS The idea behind CSS is that you can use a selector to target an HTML element in the DOM (Document Object Model) and then apply a variety of attributes to that element to change the way it is displayed on the page. You can apply CSS inline but it’s better to use an external stylesheet. You can also create a &lt;style&gt; block on the .html file but it’s not good practice. Element Ids: Add an id (id='meal-class-1) to an element to style it with that id’s CSS rules. An id is not reusable and should only be applied to one element. An id also has a higher specificity (importance) than a class so if both are applied to the same element and have conflicting styles, the styles of the id will be applied. Inheritance: Child elements inherit properties from their parent elements. Giving an element a class will override any conflicting rules that it inherits from its parent. If an element has multiple classes the last one in the CSS will take precedence. Giving an element a unique Id attribute (ex. #orange-text {color: orange;}) will take precedence over classes / parents. Giving an element inline CSS style (ex. &lt;h1 style='color: white'&gt;Title&lt;/h1&gt;) will take precedence over parent, classes and Ids. The last way that overrides everything is to add !important to a css rule (ex. .pink-text {color: pink !important}). Hexadecimal colors: In CSS, we can use 6 hexadecimal digits to represent colors, two each for the red (R), green (G), and blue (B) components. For example, #000000 is black and is also the lowest possible value. You can shorten this to one digit for each color, for example red = #F00. Instead of using six hexadecimal digits like you do with hex code, with RGB you specify the brightness of each color with a number between 0 and 255: orange - background-color: rgb(255, 165, 0); CSS Variables: CSS Variables are a powerful way to change many CSS style properties at once by changing only one value. To create a CSS Variable, you just need to give it a name with two dashes in front of it and assign it a value like this: --background-variable: orange. After you create your variable, you can assign its value to other CSS properties by referencing the name you gave it: background-color: var(--background-variable). When using your variable as a CSS property value, you can attach a fallback value that your browser will revert to if the given variable is invalid: --background-color: var(--background-variable, black). When you create a variable, it becomes available for you to use inside the element in which you create it. It also becomes available within any elements nested within it. This effect is known as cascading. CSS variables are often created in the :root element so they’re available everywhere throughout the page: :root {--variable: pink}. You can then re-define a variable within a class to overwrite the :root rule. Browser Fallbacks: When your browser parses the CSS of a webpage, it ignores any properties that it doesn’t recognize or support. For example, if you use a CSS variable to assign a background color on a site, Internet Explorer will ignore the background color because it does not support CSS variables. In that case, the browser will use whatever value it has for that property. If it can’t find any other value set for that property, it will revert to the default value, which is typically not ideal. This means that if you do want to provide a browser fallback, it’s as easy as providing another more widely supported value immediately before your declaration. That way an older browser will have something to fall back on, while a newer browser will just interpret whatever declaration comes later in the cascade. Example: .red-box { background: red; /*For older browswers*/ background: var(--red-color); height: 200px; width:200px; } .class . is the class selector # . is the id selector [attr=value] is the attribute selector. Example: [type=&#39;radio&#39;] { margin: 20px 0px 20px 0px; } include google fonts: &lt;link href=&quot;https://fonts.googleapis.com/css?family=Lobster&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot;&gt; we can have the browser choose from a list of fonts depending on which are available: p { font-family: Helvetica, sans-serif; } You can apply multiple classes to one element!!!! width:15px; doesn’t have a space between 15 and px - I think i’ve seen it differently elsewhere? border-radius: 15px; rounds the corners border-radius 50% makes it circular Element Description padding amount of space between the element’s content and it’s border. We can set this in one line (also margin). Ex. padding: 40px 40px 20px 20px (clockwise:top, right, bottom, left) margin controls the amount of space between an element’s border and surrounding elements. If you set a margin to a negative value it will increase the size of the element. 3.3 Applied Visual Design Element Description text-align: align text - left (default), right, center and justify (causes all lines of text except the last line to meet the left and right edges of the line box) width: relative length units (such as em), absolute length units (such as px), or as a percentage of its containing parent element font-weight font-weight: bold; is the same as wrapping text in &lt;strong&gt;&lt;/strong&gt;. Sets how thick or think characters are (ranges in abs values from 100:800 or so, and percentages can be used) text-decoration text-decoration: underline; is the same as wrapping text in &lt;u&gt;&lt;/u&gt; font-style font-style: italic; is the same as wrapping text in &lt;em&gt;&lt;/em&gt; &lt;hr&gt; create a horizontal line (self-closing tag) rgba() add opacity argument. background-color: rgba(45, 45, 45, 0.1) produces a dark gray that is nearly transparent font-size font-size. Units in px % - relative to window, and em (2em means 2 times the size) opacity adjusts the transparency. 0 is see through, 1 is opaque. text - transform lowercase, uppercase, capitalize (sentence-casing), initial, none, inherit (inherit parent props) line-height vertical amount of space between lines float does not actually use position, but sets the float property of an element. Floating elements are removed from the normal flow of a document and pushed to either the left or right of their containing parent element. z-index stack floating elements on top of each other, higher values take precedence margin move a block element horizontally (margin: auto; = center) display choose whether to display as block or inline hsl() Hue (color 0 red, 360 blue), saturation (amount of grey) lightness (amount of white 0 to black 100) linear-gradient() create a color gradient, the first arg specifies which direction the gradient moves. background: linear-gradient(0deg, #CCFFFF, #FFCCCC) background background: url(https://i.imgur.com/MJAkxbh.png); to add an image transform: transform: scale(2) doubles the element size. transform: transform: skewX(30deg); skews along the X-axis (e.g. square to rhombus) transform: transform: rotate(-45deg); rotates an element Box-shadow: Makes the &lt;div&gt; appear likes it’s floating on the page by adding shadow around it. The box-shadow property takes values for offset-x (how far to push the shadow horizontally from the element), offset-y (how far to push the shadow vertically from the element), blur-radius, spread-radius and a color value, in that order. The blur-radius and spread-radius values are optional. /* Multiple shadows with some blur */ box-shadow: 0 10px 20px rgba(0,0,0,0.19), 0 6px 6px rgba(0,0,0,0.23); Psuedo-classes: A pseudo-class is a keyword that can be added to selectors, in order to select a specific state of the element. /* When hovering over an anchor tag, change its color to red */ a:hover { color: red; } Positioning Relative:CSS treats each HTML element as its own box, which is usually referred to as the CSS Box Model. Block-level items automatically start on a new line (think headings, paragraphs, and divs) while inline items sit within surrounding content (like images or spans). The default layout of elements in this way is called the normal flow of a document, but CSS offers the position property to override it. When the position of an element is set to relative, it allows you to specify how CSS should move it relative to its current position in the normal flow of the page. It pairs with the CSS offset properties of left or right, and top or bottom. These say how many pixels, percentages, or ems to move the item away from where it is normally positioned. The following example moves the paragraph 10 pixels away from the bottom: p { /* Relative positions move away from top, bottom, left and right */ position: relative; bottom: 10px; } Absolute: The next option for the CSS position property is absolute, which locks the element in place relative to its parent container. Unlike the relative position, this removes the element from the normal flow of the document, so surrounding items ignore it. The CSS offset properties (top or bottom and left or right) are used to adjust the position. Fixed: locks an element relative to the browser window. Similar to absolute positioning, it’s used with the CSS offset properties and also removes the element from the normal flow of the document. Colors: Red (R), green (G), and blue (B) are called primary colors. Mixing two primary colors creates the secondary colors cyan (G + B), magenta (R + B) and yellow (R + G). Tertiary colors are the result of combining a primary color with one of its secondary color neighbors. For example, red (primary) and yellow (secondary) make orange. HSL () Shapes: Use CSS Styline to create a crescent moon shape: /* &lt;style&gt; .center { position: absolute; margin: auto; top: 0; right: 0; bottom: 0; left: 0; width: 100px; height: 100px; background-color: transparent; /* Change this to see the initial shape */ border-radius: 50%; box-shadow: 25px 10px 0px 0px blue; } &lt;/style&gt; &lt;div class=&quot;center&quot;&gt;&lt;/div&gt; */ Pseudo-elements: ::before and ::after pseudo-elements to function properly, they must have a defined content property. This property is usually used to add things like a photo or text to the selected element. When the ::before and ::after pseudo-elements are used to make shapes, the content property is still required, but it’s set to an empty string. 3.3.1 Animation: The animation properties control how the animation should behave and the @keyframes rule controls what happens during that animation. animation-name sets the name of the animation, which is later used by @keyframes to tell CSS which rules go with which animations; it uses percentages similarly to frames. 0% is at the beginning and 100% is at the end. Change the background color from blue to yellow in 3 seconds: /* #anim { animation-name: colorful; animation-duration: 3s; } @keyframes colorful { 0% { background-color: blue; } 100% { background-color: yellow; } } */ &lt;style&gt; button { border-radius: 5px; color: white; background-color: #0F5897; padding: 5px 10px 8px 10px; } button:hover { animation-name: background-color; animation-duration: 500ms; /* add your code below this line */ animation-fill-mode: forwards; /* add your code above this line */ } @keyframes background-color { 100% { background-color: #4791d0; } } &lt;/style&gt; &lt;button&gt;Register&lt;/button&gt; Animation Properties and Effects: Animation Property | Explanation ——————– | ————————————————- animation-name | name is referred to in @keyframes to link them animation-duration | animation-duration: 1s; animation-iteration-count | number of iterations (can be set to infinite) animation-timing-function | controls the speed at various point of the animation. linear is constant. animation-timinig-function: ease-in; is slow at the beginning and speeds up. Some animation effects: Animation Effect | Explanation ———- | ——————————————————————- opacity | make an element fade in and out Cubic-bezier function: In CSS animations, Bezier curves are used with the cubic-bezier function. The shape of the curve represents how the animation plays out. The curve lives on a 1 by 1 coordinate system. The X-axis of this coordinate system is the duration of the animation (think of it as a time scale), and the Y-axis is the change in the animation. The cubic-bezier function consists of four main points that sit on this 1 by 1 grid: p0, p1, p2, and p3. p0 and p3 are set for you - they are the beginning and end points which are always located respectively at the origin (0, 0) and (1, 1). You set the x and y values for the other two points, and where you place them in the grid dictates the shape of the curve for the animation to follow. This is done in CSS by declaring the x and y values of the p1 and p2 “anchor” points in the form: (x1, y1, x2, y2). Pulling it all together, here’s an example of a Bezier curve in CSS code: /* Equivalent to the &quot;linear&quot; keyword */ animation-timing-function: cubic-bezier(0.25, 0.25, 0.75, 0.75); 3.4 Applied Acessibility “Accessibility” generally means having web content and a user interface that can be understood, navigated, and interacted with by a broad audience. This includes people with visual, auditory, mobility, or cognitive disabilities. Websites should be open and accessible to everyone, regardless of a user’s abilities or resources. Some users rely on assistive technology such as a screen reader or voice recognition software. Other users may be able to navigate through a site only using a keyboard. Keeping the needs of various users in mind when developing your project can go a long way towards creating an open web. Having accessible web content is an ongoing challenge. A great resource for your projects going forward is the W3 Consortium’s Web Content Accessibility Guidelines (WCAG). They set the international standard for accessibility and provide a number of criteria you can use to check your work. All images are required to include alt text with HTML5. headers should have semantic / hierarchical meaning. main, header, footer, nav, article, and section can be used for increased readability from screen readers. &lt;article&gt; is for stand-alone content, &lt;section&gt; is for thematically related content. &lt;header&gt; wrap introductory information or navigation links for its parent tag &lt;nav&gt; wrap around the main navigation links in your page &lt;audio controls&gt; wrapping this around an audio element will create play buttons &lt;audio controls&gt;&lt;source src='https://s3.amazonaws.com/freecodecamp/screen-reader.mp3' type='audio/mpeg'&gt;&lt;/audio&gt; &lt;figure&gt; and &lt;figcaption&gt; Wrap a visual representation along with its caption: &lt;figure&gt; &lt;img src=&quot;roundhouseDestruction.jpeg&quot; alt=&quot;Photo of Camper Cat executing a roundhouse kick&quot;&gt; &lt;br&gt; &lt;figcaption&gt; Master Camper Cat demonstrates proper form of a roundhouse kick. &lt;/figcaption&gt; &lt;/figure&gt; Add a label on inputs where the for attribute matches the id attribute on input. This links them together. fieldset tag surrounds the entire grouping of radio buttons to achieve this. It often uses a legend tag to provide a description for the grouping, which is read by screen readers for each choice in the fieldset element. &lt;form&gt; &lt;fieldset&gt; &lt;legend&gt;Choose one of these three items:&lt;/legend&gt; &lt;input id=&quot;one&quot; type=&quot;radio&quot; name=&quot;items&quot; value=&quot;one&quot;&gt; &lt;label for=&quot;one&quot;&gt;Choice One&lt;/label&gt;&lt;br&gt; &lt;input id=&quot;two&quot; type=&quot;radio&quot; name=&quot;items&quot; value=&quot;two&quot;&gt; &lt;label for=&quot;two&quot;&gt;Choice Two&lt;/label&gt;&lt;br&gt; &lt;input id=&quot;three&quot; type=&quot;radio&quot; name=&quot;items&quot; value=&quot;three&quot;&gt; &lt;label for=&quot;three&quot;&gt;Choice Three&lt;/label&gt; &lt;/fieldset&gt; &lt;/form&gt; Date picker &lt;label for=&quot;input1&quot;&gt;Enter a date:&lt;/label&gt;&lt;input type=&quot;date&quot; id=&quot;input1&quot; name=&quot;input1&quot;&gt; Add datetime attributes for unambiguous dates: &lt;time datetime=&quot;2013-02-13&quot;&gt;last Wednesday&lt;/time&gt; text contrast ratio should be at least 4.5:1 (1:1 is the same color, 1:21 is white:black) Avoid putting anchor tags around phrases like “Click here” accessKey allows you to specify which keyboard button selects an element. &lt;button accesskey=&quot;b&quot;&gt;Important Button&lt;/button&gt; give elements a tabindex attribute to allow users to tab through them. &lt;div tabindex=0&gt;hi&lt;/div&gt;. A tabindex=-1 indicates an element is focusable but not available at the keyboard (like a new link). This also enables the psuedoclass :focus. Using positive numbers overrides the default order and allows you to specify what order elements will be focused on. Position Elements Off-screen: CSS’s magic can also improve accessibility on your page when you want to visually hide content meant only for screen readers. This happens when information is in a visual format (like a chart), but screen reader users need an alternative presentation (like a table) to access the data. CSS is used to position the screen reader-only elements off the visual area of the browser window. .sr-only { position: absolute; left: -10000px; width: 1px; height: 1px; top: auto; overflow: hidden; } 3.5 Responsive Web Design The page structure and CSS rules should be flexible to accommodate these differences. In general, design the page’s CSS to your target audience. If you expect most of your traffic to be from mobile users, take a ‘mobile-first’ approach. Then add conditional rules for larger screen sizes. A media query applies CSS rules if the condition is true. This query applies CSS rules if the width is &lt; 100px @media (max-width: 100px) { /* CSS Rules */ } “retina” - define your images as only half of their height/width in px viewport units vh: 3vh; 3% of the viewport’s height vw: 10vh; 10% of the viewport’s width vmin: 70vmin 70% of the viewport’s smaller dimension vmax: 100vmax 100% of the viewport’s bigger dimension Resonsive Images: The max-width property of 100% scales the image to fit the width of its container, but the image won’t stretch wider than its original width. Setting the display property to block changes the image from an inline element (its default), to a block element on its own line. The height property of auto keeps the original aspect ratio of the image. /* img { max-width: 100%; display: block; height: auto; } */ 3.6 CSS Flexbox A website’s User Interface (“UI”) has two components. First, there are the visual elements, such as colors, fonts, and images. Second, there is the placement or positioning of those elements. In Responsive Web Design, a UI layout must accommodate many different browsers and devices accessing the content. CSS3 introduced Flexible Boxes, or flexbox, to create page layouts for a dynamic UI. It is a layout mode that arranges elements in a predictable way for different screen sizes and browsers. While somewhat new, all popular modern browsers support flexbox. This section covers how to use flexbox and the different layout options it offers. 3.6.1 display: flex; Adding display: flex to an element turns it into a flex container. This makes it possible to align any children of that element into rows or columns. You do this by adding the flex-direction property to the parent item and setting it to row or column. Creating a row will align the children horizontally, and creating a column will align the children vertically. Other options for flex-direction are row-reverse and column-reverse. The default value for the flex-direction property is row. /* &lt;style&gt; #box-container { /* remove flex to see what they look like originally */ display: flex; flex-direction: row-reverse; height: 500px; } #box-1 { background-color: dodgerblue; width: 50%; height: 50%; } #box-2 { background-color: orangered; width: 50%; height: 50%; } &lt;/style&gt; &lt;div id=&quot;box-container&quot;&gt; &lt;div id=&quot;box-1&quot;&gt;&lt;/div&gt; &lt;div id=&quot;box-2&quot;&gt;&lt;/div&gt; &lt;/div&gt; */ 3.6.2 justify-content A flex container set as a column places the flex items in a vertical stack from top-to-bottom. For each, the direction the flex items are arranged is called the main axis. For a row, this is a horizontal line that cuts through each item. And for a column, the main axis is a vertical line through the items. justify-content: center; aligns all the flex items to the center inside the container flex-end: row - pushes to the right, column - pushes to bottom space-between - aligns items evenly, first and last items are locked to edges space-around - similar to between except first and last items are not locked to edges 3.6.3 align-items Flex containers also have a cross axis which is the opposite of the main axis. For rows, the cross axis is vertical and for columns, the cross axis is horizontal. flex-start: aligns items to the start of the flex container. For rows, this aligns items to the top of the container. For columns, this aligns items to the left of the container. flex-end: aligns items to the end of the flex container. For rows, this aligns items to the bottom of the container. For columns, this aligns items to the right of the container. center: align items to the center. For rows, this vertically aligns items (equal space above and below the items). For columns, this horizontally aligns them (equal space to the left and right of the items). stretch: stretch the items to fill the flex container. For example, rows items are stretched to fill the flex container top-to-bottom. baseline: align items to their baselines. Baseline is a text concept, think of it as the line that the letters sit on. 3.6.4 flex-wrap Using the flex-wrap property, it tells CSS to wrap items. This means extra items move into a new row or column. The break point of where the wrapping happens depends on the size of the items and the size of the container. nowrap: this is the default setting, and does not wrap items. wrap: wraps items from left-to-right if they are in a row, or top-to-bottom if they are in a column. wrap-reverse: wraps items from bottom-to-top if they are in a row, or right-to-left if they are in a column. 3.6.5 flex-shrink, grow, and basis flex-shrink allows an item to shrink if the flex container is too small. Items shrink when the width of the parent container is smaller than the combined widths of all the flex items within it. The flex-shrink property takes numbers as values. The higher the number, the more it will shrink compared to the other items in the container. For example, if one item has a flex-shrink value of 1 and the other has a flex-shrink value of 3, the one with the value of 3 will shrink three times as much as the other. The opposite of flex-shrink is the flex-grow property. Recall that flex-shrink controls the size of the items when the container shrinks. The flex-grow property controls the size of items when the parent container expands. flex-basis property specifies the initial size of the item before CSS makes adjustments with flex-shrink or flex-grow. It takes em, px, and % units. 3.6.6 flex shorthand For example, flex: 1 0 10px; will set the item to flex-grow: 1;, flex-shrink: 0;, and flex-basis: 10px; 3.6.7 order Tells CSS the order of flex items. They are in the HTML order by default. order takes numbers as values, and negatives can be used. 3.6.8 align-self Allows you to adjust each flex item’s alignments individually. Accepts the same values as align-items 3.7 CSS Grid display: grid; CSS Grid helps you easily build complex web designs. It works by turning an HTML element into a grid container with rows and columns for you to place children elements where you want within the grid. Turn any HTML element into a grid container by setting its display property to grid (display:grid). This gives you the ability to use all the other properties associated with CSS Grid. In CSS Grid, the parent element is referred to as the container and its children are called items. grid-template-columns: 50px 50px; - creates two columns that are 50px wide grid-template-rows: 50px 50px; -creates two rows that are 50px tall grid-template-columns: auto 50px 10% 2fr 1fr; This snippet creates five columns. The first column is as wide as its content, the second column is 50px, the third column is 10% of its container, and for the last two columns; the remaining space is divided into three sections, two are allocated for the fourth column, and one for the fifth. grid-column-gap: 10px; - creates 10px of empty space between columns grip-gap 5px 10px: (shorthand). one value = gap between rows and columns. two values = rows then columns &lt;style&gt; .d1{background:LightSkyBlue;} .d2{background:LightSalmon;} .d3{background:PaleTurquoise;} .d4{background:LightPink;} .d5{background:PaleGreen;} .container { font-size: 40px; width: 100%; background: LightGray; display: grid; grid-template-columns: 100px 100px 100px; grid-template-rows: 50px 50px; grid-column-gap: 10px; grid-row-gap: 5px; } &lt;/style&gt; &lt;div class=&quot;container&quot;&gt; &lt;div class=&quot;d1&quot;&gt;1&lt;/div&gt; &lt;div class=&quot;d2&quot;&gt;2&lt;/div&gt; &lt;div class=&quot;d3&quot;&gt;3&lt;/div&gt; &lt;div class=&quot;d4&quot;&gt;4&lt;/div&gt; &lt;div class=&quot;d5&quot;&gt;5&lt;/div&gt; &lt;/div&gt; 3.7.1 grid-column / grid-row The hypothetical horizontal and vertical lines that create the grid are referred to as lines. These lines are numbered starting with 1 at the top left corner of the grid and move right for columns and down for rows, counting upward. To control the amount of columns an item will consume, you can use the grid-column property in conjunction with the line numbers you want the item to start and stop at. /* This item will span from the first to third &quot;line&quot; in the grid - spanning columns one and two */ grid-column: 1 / 3; 3.7.2 Cell alignment (justify-self, align-self, and justify-items) The content of each item is located in a box which is referred to as a cell. You can align the content’s position within its cell horizontally using the justify-self property on a grid item. By default, this property has a value of stretch, which will make the content fill the whole width of the cell. align-self justifies elements vertically, it accepts all the same arguments. justify-self: start; aligns content at left of cell (top for align-self) justify-self: center; centers content justify-self: end; right-aligns (end for align-self) justify-items: center - applies to both rows and columns 3.7.3 grid-template-areas This code merges the top three cells together into an area named header, the bottom three cells into a footer area, and it makes two areas in the middle row; advert and content. Every word in the code represents a cell and every pair of quotation marks represent a row. In addition to custom labels, you can use a period (.) to designate an empty cell in the grid. grid-template-areas: &quot;header header header&quot; &quot;. content content&quot; &quot;footer footer footer&quot;; Once we have defined a grid-template-area we can place items (CSS rules) in areas by giving them the grid:area property followed by the names we want to apply it to. .item5 { background: PaleGreen; grid-area: footer; } We can also use grid-area even if areas haven’t been defined. The following stands for horizontal line to start at / vertical line to start at / horizontal line to end at / vertical line to end at. item1 { grid-area: 1/1/2/4; } 3.7.4 repeat() We can use the .repeat() function to reduce code. The first argument is # of repetitions and the second argument is the input. grid-template-columns: repeat(2, 1fr 50px) 20px; 3.7.5 minmax() This function is used to limit the size of the items when the container changes. This creates two columns; the first is 100px wide, and the second has the minimum width of 50px and the maximum width of 200px grid-template-columns: 100px minmax(50px, 200px); 3.7.6 auto-fill and auto-fit You can create flexible layouts when combining auto-fill with minmax. repeat(auto-fill, minmax(60px, 1fr)); Auto-fit works almost identically except if your container can’t fit all your items on one row, it will move them down to a new one. 3.7.7 Grids within grids /* &lt;style&gt; .container { font-size: 1.5em; min-height: 300px; width: 100%; background: LightGray; display: grid; grid-template-columns: auto 1fr; grid-template-rows: auto 1fr auto; grid-gap: 10px; grid-template-areas: &quot;advert header&quot; &quot;advert content&quot; &quot;advert footer&quot;; } .item1 { background: LightSkyBlue; grid-area: header; } .item2 { background: LightSalmon; grid-area: advert; } .item3 { background: PaleTurquoise; grid-area: content; /* enter your code below this line */ display: grid; grid-template-columns: auto 1fr; /* enter your code above this line */ } .item4 { background: lightpink; grid-area: footer; } .itemOne { background: PaleGreen; } .itemTwo { background: BlanchedAlmond; } &lt;/style&gt; &lt;div class=&quot;container&quot;&gt; &lt;div class=&quot;item1&quot;&gt;header&lt;/div&gt; &lt;div class=&quot;item2&quot;&gt;advert&lt;/div&gt; &lt;div class=&quot;item3&quot;&gt; &lt;div class=&quot;itemOne&quot;&gt;paragraph1&lt;/div&gt; &lt;div class=&quot;itemTwo&quot;&gt;paragraph2&lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;item4&quot;&gt;footer&lt;/div&gt; &lt;/div&gt; */ 3.8 Useful Code Snippets: These are code snippets I’ve re-used that are quite useful. 3.8.1 Center a div inside a section .center-text-in-image { position: absolute; width: 1140px; top: 50%; left: 50%; transform: translate(-50%, -50%); /*moves image back by 50% of width and height*/ } 3.8.2 Create a background image #welcome-section { background: linear-gradient(rgba(0, 0, 0, .7), rgba(0, 0, 0, .7)), url(http://assets.vg247.com/current//2015/08/jax_4_concept_art-3.jpg); height: 100vh; background-position: center; background-size: cover; /* re-size image based on window */ background-attachment: fixed; /*image stays in the same place when you scroll */ color: white; } 3.8.3 Create an underline psuedoclass for headers h2:after { /* Appears after the h2 class, after = psuedoclass */ display:block; height: 2px; background-color: var(--orange); content: &#39; &#39;; /* required for an after psuedoclass */ width: 100px; margin: 0 auto 0 auto /* centers it */; margin-top: 30px; } 3.9 Project 1: Build a Tribute Page ### vertical line spacing between items li { margin: 12px 0; } 3.9.1 Project Code: /* &lt;style&gt; .main { background-color: #e0e0eb; font-family: Times New Roman; } h1 { text-align: center; padding-top: 20px; font-weight: 100; font-style: none; } h2 { text-align: center; } .title-sub{ text-align: center; } img { /* want to make it slightly transparent */ transform: scale(.85); opacity: .85; margin: center; box-shadow: 0 10px 20px rgba(0,0,0,0.19), 0 15px 20px rgba(0,0,0,0.23); width: 75%; margin-left: 12.5%; display: block; max-width: 100%; } .img-div { background-color: #efeff5; display: float; margin: 25px 2% 0px 2%; } .image-label { text-align: center; margin-top: -15px; padding-bottom: 15px; } .tribute-info { padding-top: 15px; width: 40%; text-align: left; margin-left: 30%; } ul { font-size: 120%; } li { margin: 12px 0; } .wiki { padding: 20px 0 30px 0; font-size: 140%; width: 60%; margin-left: 25%; } .quote { padding-top: 10px; text-align: center; } &lt;/style&gt; &lt;main&gt; &lt;header&gt;&lt;/header&gt; &lt;body&gt; &lt;div class=&#39;main&#39; id=&#39;main&#39;&gt; &lt;h1 class=&#39;title&#39; id=&#39;title&#39;&gt;Wardell Stephen Curry II&lt;/h1&gt; &lt;div class=&#39;title-sub&#39;&gt; &lt;em&gt;-the man who rained fire&lt;em&gt; &lt;/div&gt; &lt;div class=&#39;img-div&#39; id=&#39;img-div&#39;&gt; &lt;img src=&#39;https://clutchpoints.com/wp-content/uploads/2018/12/stephen-curry-2.jpg&#39; id = &#39;image&#39; alt=&#39;stephen curry photo&#39;&gt;&lt;br&gt;&lt;div class=&#39;image-label&#39; id=&#39;img-caption&#39;&gt;Stephen Curry, first from left, adorns 3 point shot goggles. Also pictured: Stephen Curry, second from right, in a shooting stance. &lt;/div&gt; &lt;/div&gt; &lt;div class=&#39;tribute-info&#39; id=&#39;tribute-info&#39;&gt; &lt;h2&gt; Here&#39;s a timelime of Steph&#39;s life: &lt;/h2&gt; &lt;div class=&#39;list&#39;&gt; &lt;ul&gt; &lt;li&gt;Born March 14th, 1988.&lt;/li&gt; &lt;li&gt;Curry is the son of former NBA player Dell Curry and older brother of current NBA player Seth Curry. &lt;/li&gt; &lt;li&gt;He played college basketball for Davidson. There, he was twice named Southern Conference Player of the Year and set the all-time scoring record for both Davidson and the Southern Conference.&lt;/li&gt; &lt;li&gt;June 25, 2009, Curry was selected with the seventh overall pick in the 2009 NBA draft by the Golden State Warriors.&lt;/li&gt; &lt;li&gt;In 2014–15, Curry won the NBA Most Valuable Player Award and led the Warriors to their first championship since 1975.&lt;/li&gt; &lt;li&gt;He and teammate Klay Thompson were nicknamed the Splash Brothers en route to setting the NBA record for combined three-pointers in a season with 484, a record they broke the following season (525) and again in the 2015–16 season (678).&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&#39;quote&#39;&gt;&quot;I mean, this is terrifying. This is NBA helplessness. You can feel the panic among San Antonio players, fans, and coaches. I almost shriek on their behalf just watching.&quot;&lt;/div&gt; &lt;br&gt; &lt;div class=&#39;quote&#39;&gt;-- Zach Lowe on Stephen Curry&lt;/div&gt; &lt;div class=&#39;wiki&#39;&gt; If you have time, read more about the greatest shooter who ever lived on his &lt;a href=&#39;https://en.wikipedia.org/wiki/Stephen_Curry&#39; id=&#39;tribute-link&#39; alt=&#39;wikipedia link steph curry&#39; target=&#39;_blank&#39;&gt;Wikipedia Page&lt;/a&gt; &lt;/div&gt; &lt;/div&gt; &lt;/body&gt; &lt;/main&gt; */ 3.10 Project 2: Build a Survey Form 3.10.1 inline-block vs inline Compared to display: inline, the major difference is that display: inline-block allows to set a width and height on the element. Also, with display: inline-block, the top and bottom margins/paddings are respected, but with display: inline they are not. Compared to display: block, the major difference is that display: inline-block does not add a line-break after the element, so the element can sit next to other elements. 3.10.2 Format an Use padding: 5px to make the box around an input field expand 5px in each direction past the placeholder text. Use text-align: left as well 3.10.3 Dropdown list Add a disabled value to the top of the list. &lt;select name=&quot;cars&quot;&gt; &lt;option value=&quot;volvo&quot;&gt;Volvo&lt;/option&gt; &lt;option value=&quot;saab&quot;&gt;Saab&lt;/option&gt; &lt;option value=&quot;fiat&quot;&gt;Fiat&lt;/option&gt; &lt;option value=&quot;audi&quot;&gt;Audi&lt;/option&gt; &lt;/select&gt; 3.10.4 Throw HTML5 validation error We can throw a validation error if only want a certain type of input. For instance here we only want numeric input in the first box and email input in the second one. &lt;input type=&#39;number&#39; class=&#39;input-div&#39; placeholder=&#39;Age&#39; id=&#39;number&#39; required&gt; &lt;input type=&#39;email&#39; class=&#39;input-div&#39; placeholder=&#39;Enter your email&#39; id=&#39;email&#39; required&gt; 3.10.5 Checkbox input Create a checkbox list &lt;div&gt; &lt;input type=&#39;checkbox&#39; value=&#39;front-end-projects&#39; checked&gt; &lt;span&gt;Front End Projects&lt;/span&gt; &lt;/div&gt; &lt;div&gt; &lt;input type=&#39;checkbox&#39; value=&#39;back-end-projects&#39;&gt; &lt;span&gt;Back End Projects&lt;/span&gt; &lt;/div&gt; 3.10.6 Add min/max attributes to an input field &lt;input type=&#39;number&#39; class=&#39;input-div&#39; min=2 max= 150 placeholder=&#39;Age&#39; id=&#39;number&#39; required&gt; 3.10.7 textarea creates a box that the user can write in for comments and suggestions. It can be sized with the “rows” and “cols” attributes. &lt;textarea rows=&#39;6&#39; cols=&#39;40&#39;&gt;&lt;/textarea&gt; 3.10.8 Project Code &lt;style&gt; body { text-align: center; background-color: #ccffff; min-width: 320px; font-family: Helvetica; font-weight: 100; } .survey-form { background-color: #ffffff; margin: 0px 15% 0px 15%; } form { padding-top: 15px; } label { text-align: left } div { display: block; padding: 6px } input { border-radius: 2px; } .label-div { width: 30%; text-align: right; padding-top: 9px; padding-right: 15px; display: inline-block; vertical-align: top; } .input-div { width: 45%; display: inline-block; text-align: left; padding: 5px; vertical-align: top; } .dropdown { width: 35%; height: 30px; } .button-submit { border-radius: 5px; background-color: #0099ff; width: 12%; height: 40px; font-size: 150%; color: #FFFFFF; margin-left: -10%; margin-top: 10px; } &lt;/style&gt; &lt;body id=&#39;main&#39;&gt; &lt;div&gt; &lt;h1 id=&#39;title&#39;&gt;Survey Form&lt;/h1&gt; &lt;/div&gt; &lt;form class=&#39;survey-form&#39; id=&#39;survey-form&#39;&gt; &lt;p id=&#39;description&#39;&gt; Let us know how we can improve FreeCodeCamp &lt;/p&gt; &lt;div class=&#39;row&#39;&gt; &lt;div class=&#39;label-div&#39;&gt; &lt;label id=&#39;name-label&#39; for=&#39;name&#39;&gt;* Name: &lt;/label&gt; &lt;/div&gt; &lt;div class=&#39;input-div&#39;&gt; &lt;input type=&#39;text&#39; class=&#39;input-div&#39; placeholder=&#39;Enter your name&#39; id=&#39;name&#39; required&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&#39;row&#39;&gt; &lt;div class=&#39;label-div&#39;&gt; &lt;label id=&#39;email-label&#39; for=&#39;email&#39;&gt;* Email: &lt;/label&gt; &lt;/div&gt; &lt;div class=&#39;input-div&#39;&gt; &lt;input type=&#39;email&#39; class=&#39;input-div&#39; placeholder=&#39;Enter your email&#39; id=&#39;email&#39; required&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&#39;row&#39;&gt; &lt;div class=&#39;label-div&#39;&gt; &lt;label id=&#39;number-label&#39; for=&#39;number&#39;&gt;* Age: &lt;/label&gt; &lt;/div&gt; &lt;div class=&#39;input-div&#39;&gt; &lt;input type=&#39;number&#39; class=&#39;input-div&#39; min=2 max= 150 placeholder=&#39;Age&#39; id=&#39;number&#39; required&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&#39;row&#39;&gt; &lt;div class=&#39;label-div&#39;&gt; &lt;label for=&#39;dropdown&#39;&gt;Which option best describes your current role? &lt;/label&gt; &lt;/div&gt; &lt;div class=&#39;input-div&#39;&gt; &lt;select name=&#39;dropdown&#39; id=&#39;dropdown&#39; class=&#39;dropdown&#39;&gt; &lt;option value=&#39;disabled&#39; disabled value selected&gt;Choose an option:&lt;/option&gt; &lt;option value=&#39;student&#39;&gt;Student&lt;/option&gt; &lt;option value=&#39;full-time&#39;&gt;Full-time employed&lt;/option&gt; &lt;option value=&#39;part-time&#39;&gt;Part-time employed&lt;/option&gt; &lt;option value=&#39;other&#39;&gt;Other&lt;/option&gt; &lt;/select&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&#39;row&#39;&gt; &lt;div class=&#39;label-div&#39;&gt; &lt;label&gt;How likely are you to reccomend freeCodeCamp to a friend?&lt;/label&gt; &lt;/div&gt; &lt;div class=&#39;radio input-div&#39;&gt; &lt;label for=&#39;definitely&#39;&gt; &lt;input id=&#39;definitely&#39; type=&#39;radio&#39; name=&#39;reccomenadation&#39; value=&#39;definitely&#39;&gt;Definitely &lt;/label&gt; &lt;label for=&#39;maybe&#39;&gt; &lt;input id=&#39;maybe&#39; type=&#39;radio&#39; name=&#39;reccomenadation&#39; value=&#39;maybe&#39;&gt;Maybe &lt;/label&gt; &lt;label for=&#39;not-sure&#39;&gt;&lt;input id=&#39;not-sure&#39; type=&#39;radio&#39; name=&#39;reccomenadation&#39; value=&#39;not-sure&#39;&gt;Not sure&lt;/label&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&#39;row&#39;&gt; &lt;div class=&#39;label-div&#39;&gt; &lt;label for=&#39;dropdown2&#39;&gt;What do you like most in FCC?&lt;/label&gt; &lt;/div&gt; &lt;div class=&#39;input-div&#39;&gt; &lt;select name=&#39;dropdown2&#39; id=&#39;dropdown&#39; class=&#39;dropdown&#39;&gt; &lt;option value=&#39;disabled&#39; disabled value selected&gt;Choose an option:&lt;/option&gt; &lt;option value=&#39;projects&#39;&gt;Projects&lt;/option&gt; &lt;option value=&#39;community&#39;&gt;Community&lt;/option&gt; &lt;option value=&#39;open-source&#39;&gt;Open Source&lt;/option&gt; &lt;option value=&#39;other&#39;&gt;Other&lt;/option&gt; &lt;/select&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&#39;row&#39;&gt; &lt;div class=&#39;label-div&#39;&gt; &lt;label&gt;Things that should be improved in the future (check all that apply)&lt;/label&gt; &lt;/div&gt; &lt;div class=&#39;input-div&#39;&gt; &lt;div&gt; &lt;input type=&#39;checkbox&#39; value=&#39;front-end-projects&#39; checked&gt; &lt;span&gt;Front End Projects&lt;/span&gt; &lt;/div&gt; &lt;div&gt; &lt;input type=&#39;checkbox&#39; value=&#39;back-end-projects&#39;&gt; &lt;span&gt;Back End Projects&lt;/span&gt; &lt;/div&gt; &lt;div&gt; &lt;input type=&#39;checkbox&#39; class=&#39;checkbox&#39; value=&#39;challenges&#39;&gt; &lt;span&gt;Challenges&lt;/span&gt; &lt;/div&gt; &lt;div&gt; &lt;input type=&#39;checkbox&#39; value=&#39;additional-courses&#39;&gt; &lt;span&gt;Additional courses&lt;/span&gt; &lt;/div&gt; &lt;div&gt; &lt;input type=&#39;checkbox&#39; value=&#39;videos&#39;&gt; &lt;span&gt;Videos&lt;/span&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&#39;row&#39;&gt; &lt;div class=&#39;label-div&#39;&gt; Any comments or suggestions? &lt;/div&gt; &lt;div class=&#39;input-div&#39;&gt; &lt;textarea rows=&#39;6&#39; cols=&#39;40&#39;&gt;&lt;/textarea&gt; &lt;div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div&gt; &lt;button type=&#39;submit&#39; class=&#39;button-submit&#39; id=&#39;submit&#39;&gt;Submit&lt;/button&gt; &lt;/div&gt; &lt;/form&gt; &lt;/body&gt; 3.11 Project 3: Project Landing Page Build a product landing page 3.11.1 fixed navbar Use the following code to fix an object in place - usually reservered for menus. position: fixed; 3.11.2 Project Code &lt;style&gt; header { position: fixed; } body { font-family: Sans-serif; } section { padding-top: 80px; text-align: center; } div { display: flex; } .block_display { display: block; } h2 { margin: 0; } p { margin: 0; } ul { /* remove styling from the list */ list-style-type: none; margin-top: 0; margin-right: 0; padding-top: 10px; } a li { display: inline; } a { text-decoration: none; font-size: 1.4em; padding-right: 30px; color: black; } input { width: 200px; height: 24px; margin-top: 10px; padding: 3px; } .hello { border-radius: 10px; width: 100px; padding: 3px; } i { color: #e67e22; padding: 8px 20px 0 0; } .flex-container { flex-direction: row; } .company-name { font-size: 1.8em; font-family: Tangerine; padding-top: 10px; text-shadow: 4px 4px 4px #aaa; width: 55vw; } .middle-home-page { flex-direction: column; } .company-motto { padding-top: 80px; font-size: 1.75em; width: 100vw; justify-content: center; } .email-box { justify-content: center; width: 100vw; } .btn_lets_go { justify-content: center; padding-top: 10px; } .grid-container { padding-top: 80px; display: grid; grid-template-columns: auto 50vw; margin-left: 20%; margin-right: 20%; text-align: left; } /* Select the child &lt;div&gt; elements of the .grid_container class */ .grid-container div { padding-top: 25px; } .hide { z-index: 0; width: 0; height: 0; } #pricing { display: flex; } #flask1, #flask2, #flask3 { display: block; margin: 15px; border: 1px solid black; flex-direction: row; width: calc(100%/3); } #flask1-h2, #flask2-h2, #flask3-h2 { background: #f0f0f5; padding: 15px; } @media only screen and (max-width: 600px) { body { background-color: lightblue; } } &lt;/style&gt; &lt;head&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;https://fonts.googleapis.com/css?family=Tangerine&quot;&gt; &lt;link href=&quot;https://unpkg.com/ionicons@4.4.8/dist/css/ionicons.min.css&quot; rel=&quot;stylesheet&quot;&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css&quot;&gt; &lt;/head&gt; &lt;body&gt; &lt;header id=&#39;header&#39;&gt; &lt;div class=&#39;flex-container&#39;&gt; &lt;div&gt; &lt;i class=&quot;fa fa-rebel fa-2x&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt; &lt;img src=&#39;https://d2gg9evh47fn9z.cloudfront.net/800px_COLOURBOX3684893.jpg&#39; id=&#39;header-img&#39; class=&#39;hide&#39;&gt; &lt;/div&gt; &lt;div class=&#39;company-name&#39;&gt; HydroFlask &lt;/div&gt; &lt;nav id=&#39;nav-bar&#39;&gt; &lt;ul&gt; &lt;a href=&#39;#features&#39; alt=&#39;features&#39; class=&#39;nav-link&#39;&gt;&lt;li&gt;Features&lt;/li&gt;&lt;/a&gt; &lt;a href=&#39;#how-it-works&#39; alt=&#39;how-it-works&#39; class=&#39;nav-link&#39;&gt;&lt;li&gt;How it works&lt;/li&gt;&lt;/a&gt; &lt;a href=&#39;#pricing&#39; alt=&#39;pricing&#39; class=&#39;nav-link&#39;&gt;&lt;li&gt;Pricing&lt;/li&gt;&lt;/a&gt; &lt;/ul&gt; &lt;/nav&gt; &lt;/header&gt; &lt;main&gt; &lt;/section&gt; &lt;div class=&#39;middle-home-page&#39;&gt; &lt;div class=&#39;company-motto&#39;&gt; Handcrafted, homemade, water bottles &lt;/div&gt; &lt;form id=&#39;form&#39; action=&#39;https://www.freecodecamp.com/email-submit&#39;&gt; &lt;div class=&#39;email-box&#39;&gt; &lt;input type=&#39;email&#39; placeholder=&#39;Enter your email address&#39; id=&#39;email&#39; name=&#39;email&#39; required&gt; &lt;/div&gt; &lt;div class=&#39;btn_lets_go&#39;&gt; &lt;input type=&#39;submit&#39; id=&#39;submit&#39; value= &#39;Get Started&#39; class=&#39;hello&#39;&gt; &lt;/div&gt; &lt;/form&gt; &lt;/div&gt; &lt;section class=&#39;grid-container&#39; id=&#39;features&#39;&gt; &lt;div&gt;&lt;i class=&quot;fa fa-superpowers fa-4x&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt; &lt;/div&gt; &lt;div class=&#39;block_display&#39;&gt;&lt;h2&gt;Benefits&lt;/h2&gt;&lt;p&gt;Drinking from hydroflasks is guaranteed to give you one random superpower or your money back. Superpowers include hydration (this is the most commonly bestowed power).&lt;/p&gt;&lt;/div&gt; &lt;div&gt;&lt;i class=&quot;fa fa-rocket fa-4x&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt; &lt;/div&gt; &lt;div class=&#39;block_display&#39;&gt;&lt;h2&gt;Fast Shipping!&lt;/h2&gt;&lt;p&gt;The instant you order we&#39;ll personally send a staff member on an oddyssey of great personal peril to hand-deliver your new HydroFlask.&lt;/p&gt;&lt;/div&gt; &lt;div&gt;&lt;i class=&quot;fa fa-eercast fa-4x&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt; &lt;/div&gt; &lt;div class=&#39;block_display&#39;&gt;&lt;h2&gt;Quality Assurance&lt;/h2&gt;&lt;p&gt;For every purchase you make, we will ensure there are no damages or faults and we will check and test the pitch of your instrument.&lt;/p&gt;&lt;/div&gt; &lt;/section&gt; &lt;section id=&#39;how-it-works&#39;&gt; &lt;iframe id=&#39;video&#39; width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/tQANVXppDPE&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;/iframe&gt; &lt;/section&gt; &lt;section id=&#39;pricing&#39;&gt; &lt;div id=&#39;flask1&#39;&gt; &lt;div id=&#39;flask1-h2&#39;&gt;&lt;h2&gt;Basic Flask&lt;/h2&gt;&lt;/div&gt; &lt;ul id=&#39;flask-list1&#39;&gt; &lt;li&gt;46 oz. of liquid storage space&lt;/li&gt; &lt;li&gt;Keeps contents at constant temperature&lt;/li&gt; &lt;li&gt;Best flask for beginners&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;div id=&#39;flask2&#39;&gt; &lt;div id=&#39;flask2-h2&#39;&gt;&lt;h2&gt;Deluxe Flask&lt;/h2&gt;&lt;/div&gt; &lt;/div&gt; &lt;div id=&#39;flask3&#39;&gt; &lt;div id=&#39;flask3-h2&#39;&gt;&lt;h2&gt;Uber Flask&lt;/h2&gt;&lt;/div&gt; &lt;/div&gt; &lt;/section&gt; &lt;/main&gt; &lt;/body&gt; 3.12 Project 4: Technical Documenation 3.12.1 &lt;code&gt; Use tags in html to output text in code chunks. The following CSS styles a code block: code { display: block; text-align: left; white-space: pre; position: relative; word-break: normal; word-wrap: normal; line-height: 2; background-color: #f7f7f7; padding: 15px; margin: 10px; border-radius: 5px; } # Front End Libraries These are my notes from the Front End Libraries certification from FreeCodeCamp! 3.13 Bootstrap Bootstrap is a front-end framework used to design responsive web pages and web applications. It takes a mobile-first approach to web development. Bootstrap includes pre-built CSS styles and classes, plus some JavaScript functionality. Bootstrap uses a responsive 12 column grid layout and has design templates for: buttons, images, tables, forms, and navigation. Bootstrap will figure out how wide your screen is and respond by resizing your HTML elements - hence the name Responsive Design. 3.13.1 Add bootstrap You can add bootstrap by adding this code snippet to the top of your HTML &lt;link rel=&quot;stylesheet&quot; href=&quot;https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css&quot; integrity=&quot;sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u&quot; crossorigin=&quot;anonymous&quot;/&gt; 3.13.2 Bootstrap classes class explanation class = img-responsive make an image fit exactly the width of your screen. class = text-center center text text-primary img-responsive form-control btn-default applies border radius btn btn-primary applies border-radius, blue background, and white text styling div class='well' creates a perception of depth 3.13.3 Buttons Bootstrap has default button styles that look better than normal ones. &lt;button class=&quot;btn btn-default&quot;&gt;Submit&lt;/button&gt; If we add the btn-block class it will expand to fill the horizontal space and any elements that follow it will be pushed to a new line. &lt;button class=&quot;btn btn-default btn-block&quot;&gt;Submit&lt;/button&gt; The btn-primary class is the main color you’ll use in your app. We use this in place of btn-default The btn-info is another color scheme that calls attention to the user. (lighter blue) The btn-danger class provides a red styling - warns of a destructive action like deleting. 3.13.4 BootStrap Grid Bootstrap uses a responsive 12-column grid system, which makes it easy to put elements into rows and specify each element’s relative width. Most of Bootstrap’s classes can be applied to a div element. Bootstrap has different column width attributes that it uses depending on how wide the user’s screen is. For example, phones have narrow screens, and laptops have wider screens.Take for example Bootstrap’s col-md-* class. Here, md means medium, and * is a number specifying how many columns wide the element should be. In this case, the column width of an element on a medium-sized screen, such as a laptop, is being specified. This example creates a 3 column row. xs refers to extra small - for phone screens. 4 refers to the number of columns each div spans. &lt;div class=&#39;row&#39;&gt; &lt;div class=&#39;col-xs-4&#39;&gt;&lt;button class=&quot;btn btn-block btn-primary&quot;&gt;Like&lt;/button&gt;&lt;/div&gt; &lt;div class=&#39;col-xs-4&#39;&gt;&lt;button class=&quot;btn btn-block btn-info&quot;&gt;Info&lt;/button&gt;&lt;/div&gt; &lt;div class=&#39;col-xs-4&#39;&gt;&lt;button class=&quot;btn btn-block btn-danger&quot;&gt;Delete&lt;/button&gt;&lt;/div&gt; &lt;/div&gt; Bootstrap’s responsive system will resize images so that they fit on the same line. (Remove the bootstrap classes from the following html to see the effect) &lt;div class=&#39;row&#39;&gt; &lt;div class=&#39;col-xs-8&#39;&gt;&lt;h2 class=&quot;text-primary text-center&quot;&gt;CatPhotoApp&lt;/h2&gt;&lt;/div&gt; &lt;div class=&#39;col-xs-4&#39;&gt;&lt;a href=&quot;#&quot;&gt;&lt;img class=&quot;img-responsive thick-green-border&quot; src=&quot;https://bit.ly/fcc-relaxing-cat&quot; alt=&quot;A cute orange cat lying on its back.&quot;&gt;&lt;/a&gt;&lt;/div&gt; &lt;/div&gt; We can also nest radio buttons in a responsive layout &lt;div class=&#39;row&#39;&gt; &lt;div class=&#39;col-xs-6&#39;&gt;&lt;label&gt;&lt;input type=&quot;radio&quot; name=&quot;indoor-outdoor&quot;&gt; Indoor&lt;/label&gt;&lt;/div&gt; &lt;div class=&#39;col-xs-6&#39;&gt;&lt;label&gt;&lt;input type=&quot;radio&quot; name=&quot;indoor-outdoor&quot;&gt; Outdoor&lt;/label&gt;&lt;/div&gt; &lt;div class=&#39;col-xs-6&#39;&gt;&lt;label&gt;&lt;input type=&quot;checkbox&quot; name=&quot;personality&quot;&gt; Loving&lt;/label&gt;&lt;/div&gt; &lt;div class=&#39;col-xs-6&#39;&gt;&lt;label&gt;&lt;input type=&quot;checkbox&quot; name=&quot;personality&quot;&gt; Lazy&lt;/label&gt;&lt;/div&gt; &lt;div class=&#39;col-xs-6&#39;&gt;&lt;label&gt;&lt;input type=&quot;checkbox&quot; name=&quot;personality&quot;&gt; Crazy&lt;/label&gt;&lt;/div&gt; &lt;/div&gt; 3.13.5 span We can use a &lt;span&gt; element to create styles for inline elements. We then assign a class to the span to apply styling. .text-danger { color: red; } &lt;p&gt;Things cats &lt;span class=&#39;text-danger&#39;&gt;love:&lt;/span&gt;&lt;/p&gt; 3.13.6 Font awesome Font Awesome is a convenient library of icons. These icons are vector graphics, stored in the .svg (scalable vector graphic) file format. These icons are treated just like fonts. You can specify their size using pixels, and they will assume the font size of their parent HTML elements. You need to include the link to the Font awesome style sheet in the &lt;head&gt; element to use the icons. &lt;i class=&quot;fa fa-info-circle&quot;&gt;&lt;/i&gt; You can also use a span tag for FA icons: &lt;span class=&#39;fa fa-info-circle&#39;&gt;&lt;/span&gt; You can also put icons in buttons for added effect: &lt;button class=&quot;btn btn-block btn-primary&quot;&gt;&lt;i class=&quot;fa fa-thumbs-up&quot;&gt;&lt;/i&gt; Like&lt;/button&gt; 3.13.7 Create a bootstrap layout. To create a responsive layout elements need to be wrapped in div class='container-fluid&gt;&lt;/div&gt;. You then use row and column classess to create desired layouts. &lt;div class=&quot;row&quot;&gt; &lt;div class=&quot;col-xs-6&quot;&gt; &lt;/div&gt; &lt;div class=&quot;col-xs-6&quot;&gt; &lt;/div&gt; &lt;/div&gt; 3.13.8 Class targeting Sometimes we apply classes to html elements without any CSS styling to select them easie when using jQuery. Here we add the “target” class with no styling. &lt;button class=&quot;btn btn-default target&quot;&gt;&lt;/button&gt; 3.14 jQuery jQuery is one of the many libraries for JavaScript. It is designed to simplify scripting done on the client side. jQuery’s most recognizable characteristic is its dollar sign ($) syntax. With it, you can easily manipulate elements, create animations and handle input events. Add the following code to the top of the HTML document to initialize jQuery: &lt;script&gt;$(document).ready(function() { }); &lt;/script&gt; 3.14.1 Methods 3.14.1.1 selector All jQuery functions start with a $, usually referred to as a dollar sign operator, or as bling. jQuery often selects an HTML element with a selector, then does something to that element. For example, let’s make all of the button elements bounce. &lt;script&gt; $(document).ready(function() { $(&quot;button&quot;).addClass(&quot;animated bounce&quot;); }); &lt;/script&gt; We can target a classes and ids by using the same . and # syntax: $(&#39;.class-name&#39;).addClass(&#39;animated shake&#39;); $(&quot;#target3&quot;).addClass(&quot;animated fadeOut&quot;); 3.14.1.2 Change CSS We can change the CSS of an element by using the .css() function. $(&#39;#target1&#39;).css(&#39;color&#39;, &#39;blue&#39;); 3.14.1.3 Change properties jQuery has a function called .prop() that allows you to adjust the properties of elements. Here’s how you would disable all buttons: $(&quot;button&quot;).prop(&quot;disabled&quot;, true); 3.14.1.4 Change text inside elements jQuery has a function called .html() that lets you add HTML tags and text within an element. Any content previously within the element will be completely replaced with the content you provide using this function. $(&quot;h3&quot;).html(&quot;&lt;em&gt;jQuery Playground&lt;/em&gt;&quot;); jQuery also has a similar function called .text() that only alters text without adding tags. In other words, this function will not evaluate any HTML tags passed to it, but will instead treat it as the text you want to replace the existing content with. 3.14.1.5 remove elements We can remove elements by using the .remove() function. $(&#39;#target4&#39;).remove(); 3.14.1.6 move elements jQuery has a function called appendTo() that allows you to select HTML elements and append them to another element. $(&#39;.class&#39;).appendTo(&#39;#id&#39;) 3.14.1.7 clone elements jQuery has a function called clone() that makes a copy of an element. We can use this in conjunction with appendTo() to copy-paste elements $(&#39;#id&#39;).clone().appendTo(&#39;.class&#39;) 3.14.1.8 parent function jQuery has a function called parent() that accesses the parent of the selected element. This examples changes the parent’s background color $(&#39;.class&#39;).parent().css(&#39;background-color&#39;, &#39;blue) 3.14.1.9 children function jQuery has a function called children() that allows you to access the children of whichever element you’ve selected. $(&quot;#left-well&quot;).children().css(&quot;color&quot;, &quot;blue&quot;) 3.14.1.10 CSS Selectors jQuery uses CSS Selectors to target elements. The target:nth-child(n) CSS selector allows you to select all the nth elements with the target class or element type. NOTE: you don’t select the parent element - you specify the class you’re targeting and nth-child specifies what index you want. A better name for this would be nth-index. NOTE: this will also select that index for every grouping of these classes. If, for instance, there are two lists and you want the second item, this will select the second item in BOTH lists. $(&quot;.target:nth-child(3)&quot;).addClass(&quot;animated bounce&quot;); We can also target even or odd elements (based on index) with similar syntax: $(&quot;.target:odd&quot;).addClass(&quot;animated shake&quot;); 3.14.1.11 Hilarious page animation $(&#39;body&#39;).addClass(&#39;animated hinge&#39;) 3.15 SaSS Sass, or “Syntactically Awesome StyleSheets”, is a language extension of CSS. It adds features that aren’t available using basic CSS syntax. Sass makes it easier for developers to simplify and maintain the style sheets for their projects. Sass can extend the CSS language because it is a preprocessor. It takes code written using Sass syntax, and converts it into basic CSS. This allows you to create variables, nest CSS rules into others, and import other Sass files, among other things. The result is more compact, easier to read code. There are two syntaxes available for Sass. The first, known as SCSS (Sassy CSS) and used throughout these challenges, is an extension of the syntax of CSS. This means that every valid CSS stylesheet is a valid SCSS file with the same meaning. Files using this syntax have the .scss extension. The second and older syntax, known as the indented syntax (or sometimes just “Sass”), uses indentation rather than brackets to indicate nesting of selectors, and newlines rather than semicolons to separate properties. Files using this syntax have the .sass extension. We can create variables in SaSS with the $ and set their values. $main-fonts: Arial, sans-serif; $headings-color: green; h1 { font-family: $main-fonts; color: $headings-color; } We can nest multiple CSS rules inside their parent elements nav { background-color: red; ul { list-style: none; li { display: inline-block; } } } 3.15.1 mixin mixins are like functions for CSS. Here is the syntax for defining one: @mixin box-shadow($x, $y, $blur, $c){ -webkit-box-shadow: $x, $y, $blur, $c; -moz-box-shadow: $x, $y, $blur, $c; -ms-box-shadow: $x, $y, $blur, $c; box-shadow: $x, $y, $blur, $c; } Now any time a box-shadow rule is needed, only a single line calling the mixin replaces having to type all the vendor prefixes. A mixin is called with the @include directive: div { @include box-shadow(0px, 0px, 4px, #fff); } @mixin border-radius($radius){ -webkit-border-radius: $radius; -moz-border-radius: $radius; -ms-border-radius: $radius; border-radius: $radius; } we can also create if/else statements with @if and @else @mixin border-stroke($val) { @if $val == light { border: 1px solid black; } @else if $val == medium { border: 3px solid black; } @else if $val == heavy { border: 6px solid black; } @else { border: none; } } 3.15.2 for loop @for is used in two ways: “start through end” or “start to end”. The main difference is that “start to end” excludes the end number, and “start through end” includes the end number. Example: @for $i from 1 through 12 { .col-#{$i} { width: 100%/12 * $i; } } Here’s what it looks like when it’s converted to CSS: .col-1 { width: 8.33333%; } .col-2 { width: 16.66667%; } ... .col-12 { width: 100%; } 3.15.3 each Same concept as for loop except you can define specific values - this is useful for colors @each $color in blue, red, green { .#{$color}-text {color: $color;} } 3.15.4 while Apparently these can break style sheets reeally easily - be sure to define the end clause FIRST. $x: 1; @while $x &lt; 13 { .col-#{$x} { width: 100%/12 * $x;} $x: $x + 1; } 3.15.5 Partials Partials in Sass are separate files that hold segments of CSS code. These are imported and used in other Sass files. This is a great way to group similar code into a module to keep it organized. Names for partials start with the underscore (_) character, which tells Sass it is a small segment of CSS and not to convert it into a CSS file. Also, Sass files end with the .scss file extension. To bring the code in the partial into another Sass file, use the @import directive. For example, if all your mixins are saved in a partial named “_mixins.scss“, and they are needed in the”main.scss&quot; file, this is how to use them in the main file: // In the main.scss file @import &#39;mixins&#39; 3.15.6 extend We can import the properties from one class to another class if we wish to add on (gets rid of excessive copy-pasting) .panel{ background-color: red; height: 70px; border: 2px solid green; } .big-panel{ @extend .panel; width: 150px; font-size: 2em; } 3.16 React React, popularized by Facebook, is an open-source JavaScript library for building user interfaces. It is used to create components, handle state and props, utilize event listeners and certain life cycle methods to update data as it changes. React combines HTML with JavaScript functionality to create its own markup language, JSX. This section will introduce you to all of these concepts and how to implement them for use with your own projects. Intro: React is an Open Source view library created and maintained by Facebook. It’s a great tool to render the User Interface (UI) of modern web applications. React uses a syntax extension of JavaScript called JSX that allows you to write HTML directly within JavaScript. This has several benefits. It lets you use the full programmatic power of JavaScript within HTML, and helps to keep your code readable. For the most part, JSX is similar to the HTML that you have already learned, however there are a few key differences that will be covered throughout these challenges. For instance, because JSX is a syntactic extension of JavaScript, you can actually write JavaScript directly within JSX. To do this, you simply include the code you want to be treated as JavaScript within curly braces: { ‘this is treated as JavaScript code’ }. Keep this in mind, since it’s used in several future challenges. However, because JSX is not valid JavaScript, JSX code must be compiled into JavaScript. The transpiler Babel is a popular tool for this process. For your convenience, it’s already added behind the scenes for these challenges. If you happen to write syntactically invalid JSX, you will see the first test in these challenges fail. It’s worth noting that under the hood the challenges are calling ReactDOM.render(JSX, document.getElementById(‘root’)). This function call is what places your JSX into React’s own lightweight representation of the DOM. React then uses snapshots of its own DOM to optimize updating only specific parts of the actual DOM. 3.16.1 Complex element Elements must be transpiled as single elements. Therefore if you have multiple elements they must be wrapped in a single parent element. The following is invalid JSX (it needs to be wrapped in a div parent): &lt;p&gt;Paragraph One&lt;/p&gt; &lt;p&gt;Paragraph Two&lt;/p&gt; &lt;p&gt;Paragraph Three&lt;/p&gt; We can optionally wrap these declarations in parentheses - though it is considered good practice to do so. 3.16.2 Comments To add comments we use the following syntax: {/* */} 3.16.3 Render HTML elements to the DOM ReactDOM.render(componentToRender, targetNode), where the first argument is the React element or component that you want to render, and the second argument is the DOM node that you want to render the component to. const JSX = ( &lt;div&gt; &lt;h1&gt;Hello World&lt;/h1&gt; &lt;p&gt;Lets render this to the DOM&lt;/p&gt; &lt;/div&gt; ); ReactDOM.render(JSX, document.getElementById(&#39;challenge-node&#39;)); 3.16.4 Classes in JSX These declarations are slightly different because “class” is a reserved word in JS. Instead we use “className” to define classes in JSX. The naming convention switches to camel case also - onclick becomes onClick, onchange to onChange, etc. const JSX = ( &lt;div className=&#39;myDiv&#39;&gt; &lt;h1&gt;Add a class to this div&lt;/h1&gt; &lt;/div&gt; ); 3.16.5 Self-closing tags In html we can use some elements that don’t include a closing tag like &lt;br&gt;. In JSX all elements must either be followed by a closing tag or be written in self-closing format &lt;br&gt; –&gt; &lt;br /&gt;. const JSX = ( &lt;div&gt; &lt;h2&gt;Welcome to React!&lt;/h2&gt; &lt;br /&gt; &lt;p&gt;Be sure to close all tags!&lt;/p&gt; &lt;hr /&gt; &lt;/div&gt; ); 3.16.6 Components Components are the core of React. Everything in React is a component. There are two ways to create a React component. The first way is to use a JavaScript function. Defining a component in this way creates a stateless functional component. A stateless component is one that can receive data and render it, but does not manage or track changes to that data. To create a component with a function, you simply write a JavaScript function that returns either JSX or null. One important thing to note is that React requires your function name to begin with a capital letter. Because a JSX component represents HTML, you could put several components together to create a more complex HTML page. This is one of the key advantages of the component architecture React provides. It allows you to compose your UI from many separate, isolated components. This makes it easier to build and maintain complex user interfaces. const MyComponent = function() { // change code below this line return ( &lt;div&gt;dummy text&lt;/div&gt; ); } 3.16.6.1 Create a componenet with ES6 syntax class Kitten extends React.Component { constructor(props) { super(props); } render() { return ( &lt;h1&gt;Hi&lt;/h1&gt; ); } } This creates an ES6 class Kitten which extends the React.Component class. So the Kitten class now has access to many useful React features, such as local state and lifecycle hooks. Also notice the Kitten class has a constructor defined within it that calls super(). It uses super() to call the constructor of the parent class, in this case React.Component. The constructor is a special method used during the initialization of objects that are created with the class keyword. It is best practice to call a component’s constructor with super, and pass props to both. This makes sure the component is initialized properly. 3.16.6.2 Composition We can put multiple components together into one - for instance navbar, dashboard, and footer components. To compose then together we create a parent component that calls then. They are called using self-closing JSX tag syntax. return ( &lt;App&gt; &lt;Navbar /&gt; &lt;Dashboard /&gt; &lt;Footer /&gt; &lt;/App&gt; ) More extensive example: const ChildComponent = () =&gt; { return ( &lt;div&gt; &lt;p&gt;I am the child&lt;/p&gt; &lt;/div&gt; ); }; class ParentComponent extends React.Component { constructor(props) { super(props); } render() { return ( &lt;div&gt; &lt;h1&gt;I am the parent&lt;/h1&gt; { /* change code below this line */ } &lt;ChildComponent /&gt; { /* change code above this line */ } &lt;/div&gt; ); } }; Even more extensive example: const TypesOfFruit = () =&gt; { return ( &lt;div&gt; &lt;h2&gt;Fruits:&lt;/h2&gt; &lt;ul&gt; &lt;li&gt;Apples&lt;/li&gt; &lt;li&gt;Blueberries&lt;/li&gt; &lt;li&gt;Strawberries&lt;/li&gt; &lt;li&gt;Bananas&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; ); }; const Fruits = () =&gt; { return ( &lt;div&gt; { /* change code below this line */ } &lt;TypesOfFruit /&gt; { /* change code above this line */ } &lt;/div&gt; ); }; class TypesOfFood extends React.Component { constructor(props) { super(props); } render() { return ( &lt;div&gt; &lt;h1&gt;Types of Food:&lt;/h1&gt; { /* change code below this line */ } &lt;Fruits /&gt; { /* change code above this line */ } &lt;/div&gt; ); } }; 3.16.6.3 Render components React components are passed into ReactDOM.render() a little differently than JSX elements. For JSX elements, you pass in the name of the element that you want to render. However, for React components, you need to use the same syntax as if you were rendering a nested component, for example ReactDOM.render(&lt;ComponentToRender /&gt;, targetNode). You use this syntax for both ES6 class components and functional components. 3.16.6.4 Props In React, you can pass props, or properties, to child components. Say you have an App component which renders a child component called Welcome that is a stateless functional component. You can pass Welcome a user property by writing: &lt;App&gt; &lt;Welcome user=&#39;Mark&#39; /&gt; &lt;/App&gt; You use custom HTML attributes that React provides support for to pass the property user to the component Welcome. Since Welcome is a stateless functional component, it has access to this value like so: const Welcome = (props) =&gt; &lt;h1&gt;Hello, {props.user}!&lt;/h1&gt; Example (pass information from a parent to a child through props): const CurrentDate = (props) =&gt; { return ( &lt;div&gt; { /* change code below this line */ } &lt;p&gt;The current date is: {props.date}&lt;/p&gt; { /* change code above this line */ } &lt;/div&gt; ); }; class Calendar extends React.Component { constructor(props) { super(props); } render() { return ( &lt;div&gt; &lt;h3&gt;What date is it?&lt;/h3&gt; { /* change code below this line */ } &lt;CurrentDate date={Date()}/&gt; { /* change code above this line */ } &lt;/div&gt; ); } }; Pass an array in as a prop. We can call methods in the child component, in this case we call join const List= (props) =&gt; { { /* change code below this line */ } return &lt;p&gt;{props.tasks.join(&quot;, &quot;)}&lt;/p&gt; { /* change code above this line */ } }; class ToDo extends React.Component { constructor(props) { super(props); } render() { return ( &lt;div&gt; &lt;h1&gt;To Do Lists&lt;/h1&gt; &lt;h2&gt;Today&lt;/h2&gt; { /* change code below this line */ } &lt;List tasks={[&#39;hackathon&#39;, &#39;React&#39;, &#39;exercise&#39;]}/&gt; &lt;h2&gt;Tomorrow&lt;/h2&gt; &lt;List tasks={[&#39;gym&#39;, &#39;redux&#39;, &#39;eat&#39;]}/&gt; { /* change code above this line */ } &lt;/div&gt; ); } }; 3.16.6.5 Default Props We can set default properties using the following syntax. These are good for initial values. const ShoppingCart = (props) =&gt; { return ( &lt;div&gt; &lt;h1&gt;Shopping Cart Component&lt;/h1&gt; &lt;/div&gt; ) }; // change code below this line ShoppingCart.defaultProps = {items: 0} 3.16.6.6 PropTypes We can specify what kind of type a property should. If the wrong input is passed into it then it will throw a helpful warning. As of React v15.5.0, PropTypes is imported independently from React, like this: import React, { PropTypes } from 'react'; Items.defaultProps = { quantity: 0 }; Items.propTypes = {quantity: PropTypes.number.isRequired}; 3.16.6.7 Props in ES6 class component Anytime you refer to a class component within itself, you use the this keyword. To access props within a class component, you preface the code that you use to access it with this. For example, if an ES6 class component has a prop called data, you write {this.props.data} in JSX. Example: class ReturnTempPassword extends React.Component { constructor(props) { super(props); } render() { return ( &lt;div&gt; { /* change code below this line */ } &lt;p&gt;Your temporary password is: &lt;strong&gt;{this.props.tempPassword}&lt;/strong&gt;&lt;/p&gt; { /* change code above this line */ } &lt;/div&gt; ); } }; class ResetPassword extends React.Component { constructor(props) { super(props); } render() { return ( &lt;div&gt; &lt;h2&gt;Reset Password&lt;/h2&gt; &lt;h3&gt;We&#39;ve generated a new temporary password for you.&lt;/h3&gt; &lt;h3&gt;Please reset this password from your account settings ASAP.&lt;/h3&gt; { /* change code below this line */ } &lt;ReturnTempPassword tempPassword=&#39;hellocow&#39;/&gt; { /* change code above this line */ } &lt;/div&gt; ); } }; A stateless functional component is any function you write which accepts props and returns JSX. A stateless component, on the other hand, is a class that extends React.Component, but does not use internal state (covered in the next challenge). Finally, a stateful component is any component that does maintain its own internal state. You may see stateful components referred to simply as components or React components. A common pattern is to try to minimize statefulness and to create stateless functional components wherever possible. This helps contain your state management to a specific area of your application. 3.16.7 State State consists of any data your application needs to know about, that can change over time. You want your apps to respond to state changes and present an updated UI when necessary. You create state in a React component by declaring a state property on the component class in its constructor. This initializes the component with state when it is created. The state property must be set to a JavaScript object. Declaring it looks like this: class StatefulComponent extends React.Component { constructor(props) { super(props); // initialize state here this.state = { name: &#39;Dom&#39; } } render() { return ( &lt;div&gt; &lt;h1&gt;{this.state.name}&lt;/h1&gt; &lt;/div&gt; ); } }; Longer Defintion of State: Once you define a component’s initial state, you can display any part of it in the UI that is rendered. If a component is stateful, it will always have access to the data in state in its render() method. You can access the data with this.state. If you want to access a state value within the return of the render method, you have to enclose the value in curly braces. State is one of the most powerful features of components in React. It allows you to track important data in your app and render a UI in response to changes in this data. If your data changes, your UI will change. React uses what is called a virtual DOM, to keep track of changes behind the scenes. When state data updates, it triggers a re-render of the components using that data - including child components that received the data as a prop. React updates the actual DOM, but only where necessary. This means you don’t have to worry about changing the DOM. You simply declare what the UI should look like. Note that if you make a component stateful, no other components are aware of its state. Its state is completely encapsulated, or local to that component, unless you pass state data to a child component as props. This notion of encapsulated state is very important because it allows you to write certain logic, then have that logic contained and isolated in one place in your code. 3.16.7.1 Access state with JS variables class MyComponent extends React.Component { constructor(props) { super(props); this.state = { name: &#39;freeCodeCamp&#39; } } render() { // change code below this line const name = this.state.name // change code above this line return ( &lt;div&gt; { /* change code below this line */ } &lt;h1&gt;{name}&lt;/h1&gt; { /* change code above this line */ } &lt;/div&gt; ); } }; 3.16.7.2 Update state You call the setState method within your component class like so: this.setState(), passing in an object with key-value pairs. The keys are your state properties and the values are the updated state data. class MyComponent extends React.Component { constructor(props) { super(props); this.state = { name: &#39;Initial State&#39; }; this.handleClick = this.handleClick.bind(this); } handleClick() { // change code below this line this.setState({ name: &#39;React Rocks!&#39; }) // change code above this line } render() { return ( &lt;div&gt; &lt;button onClick={this.handleClick}&gt;Click Me&lt;/button&gt; &lt;h1&gt;{this.state.name}&lt;/h1&gt; &lt;/div&gt; ); } }; 3.16.7.3 Add Methods A class method typically needs to use the this keyword so it can access properties on the class (such as state and props) inside the scope of the method. One common way is to explicitly bind this in the constructor so this becomes bound to the class methods when the component is initialized. class MyComponent extends React.Component { constructor(props) { super(props); this.state = { itemCount: 0 }; // change code below this line this.addItem = this.addItem.bind(this); // change code above this line } addItem() { this.setState({ itemCount: this.state.itemCount + 1 }); } render() { return ( &lt;div&gt; { /* change code below this line */ } &lt;button onClick={this.addItem}&gt;Click Me&lt;/button&gt; { /* change code above this line */ } &lt;h1&gt;Current Item Count: {this.state.itemCount}&lt;/h1&gt; &lt;/div&gt; ); } }; 3.16.7.4 Use State to Toggle and Element You can use state in React applications in more complex ways than what you’ve seen so far. One example is to monitor the status of a value, then render the UI conditionally based on this value. class MyComponent extends React.Component { constructor(props) { super(props); this.state = { visibility: false }; // change code below this line this.toggleVisibility = this.toggleVisibility.bind(this); // change code above this line } // change code below this line toggleVisibility() { let value = this.state.visibility ? false : true; this.setState({visibility: value}); } // change code above this line render() { if (this.state.visibility) { return ( &lt;div&gt; &lt;button onClick={this.toggleVisibility}&gt;Click Me&lt;/button&gt; &lt;h1&gt;Now you see me!&lt;/h1&gt; &lt;/div&gt; ); } else { return ( &lt;div&gt; &lt;button onClick={this.toggleVisibility}&gt;Click Me&lt;/button&gt; &lt;/div&gt; ); } } }; Another example using a counter to set state: class Counter extends React.Component { constructor(props) { super(props); this.state = { count: 0 }; // change code below this line this.increment = this.increment.bind(this); this.decrement = this.decrement.bind(this); this.reset = this.reset.bind(this); // change code above this line } // change code below this line increment() { this.setState({count: this.state.count + 1}) } decrement() { this.setState({count: this.state.count -1}) } reset() { this.setState({count: 0}) } // change code above this line render() { return ( &lt;div&gt; &lt;button className=&#39;inc&#39; onClick={this.increment}&gt;Increment!&lt;/button&gt; &lt;button className=&#39;dec&#39; onClick={this.decrement}&gt;Decrement!&lt;/button&gt; &lt;button className=&#39;reset&#39; onClick={this.reset}&gt;Reset&lt;/button&gt; &lt;h1&gt;Current Count: {this.state.count}&lt;/h1&gt; &lt;/div&gt; ); } }; 3.16.7.5 Controlled Input form 3.16.8 Styles We can apply CSS styles to React elements the same way as JS. Set the className attribute equal to an imported class from a stylesheet. We can also use inline-styling, here’s an example of the syntax. &lt;div style={{color: &quot;yellow&quot;, fontSize: 16}}&gt;Mellow Yellow&lt;/div&gt; Hyphenated styles like font-size are changed to camelCase fontSize. All property value units are assumed to be px unless otherwise specified. Other than length values all other property values should be wrapped in quotes. If you have a large number of styles you can declare an object and use that instead. const styles = { color: &#39;purple&#39;, fontSize: 40, border: &#39;2px solid purple&#39; } 3.16.9 Use javascript in methods We can use advanced javascript in methods before we render the output. Then when we want to render we just evaluate the JS (hopefully just a variable) in curly braces. const inputStyle = { width: 235, margin: 5 } class MagicEightBall extends React.Component { constructor(props) { super(props); this.state = { userInput: &#39;&#39;, randomIndex: &#39;&#39; } this.ask = this.ask.bind(this); this.handleChange = this.handleChange.bind(this); } ask() { if (this.state.userInput) { this.setState({ randomIndex: Math.floor(Math.random() * 20), userInput: &#39;&#39; }); } } handleChange(event) { this.setState({ userInput: event.target.value }); } render() { const possibleAnswers = [ &#39;It is certain&#39;, &#39;It is decidedly so&#39;, &#39;Without a doubt&#39;, &#39;Yes, definitely&#39;, &#39;You may rely on it&#39;, &#39;As I see it, yes&#39;, &#39;Outlook good&#39;, &#39;Yes&#39;, &#39;Signs point to yes&#39;, &#39;Reply hazy try again&#39;, &#39;Ask again later&#39;, &#39;Better not tell you now&#39;, &#39;Cannot predict now&#39;, &#39;Concentrate and ask again&#39;, &#39;Don\\&#39;t count on it&#39;, &#39;My reply is no&#39;, &#39;My sources say no&#39;, &#39;Most likely&#39;, &#39;Outlook not so good&#39;, &#39;Very doubtful&#39; ]; const answer = possibleAnswers[this.state.randomIndex] // &lt;&lt; change code here return ( &lt;div&gt; &lt;input type=&quot;text&quot; value={this.state.userInput} onChange={this.handleChange} style={inputStyle} /&gt;&lt;br /&gt; &lt;button onClick={this.ask}&gt; Ask the Magic Eight Ball! &lt;/button&gt;&lt;br /&gt; &lt;h3&gt;Answer:&lt;/h3&gt; &lt;p&gt; { /* change code below this line */ } {answer} { /* change code above this line */ } &lt;/p&gt; &lt;/div&gt; ); } }; 3.16.10 If/Else example class MyComponent extends React.Component { constructor(props) { super(props); this.state = { display: true } this.toggleDisplay = this.toggleDisplay.bind(this); } toggleDisplay() { this.setState({ display: !this.state.display }); } render() { // change code below this line if(this.state.display) { return ( &lt;div&gt; &lt;button onClick={this.toggleDisplay}&gt;Toggle Display&lt;/button&gt; &lt;h1&gt;Displayed!&lt;/h1&gt; &lt;/div&gt; ); } else { return ( &lt;div&gt; &lt;button onClick={this.toggleDisplay}&gt;Toggle Display&lt;/button&gt; &lt;/div&gt; ); } } }; 3.16.11 &amp;&amp; &amp;&amp; allows you to evaluate an expression and if true it can render the subsequent JSX markup. This allows us to chain together more complex if/else blocks in a more concise manner. In this case we don’t need a full if/else statement - we just use it to toggle the h1 section. class MyComponent extends React.Component { constructor(props) { super(props); this.state = { display: true } this.toggleDisplay = this.toggleDisplay.bind(this); } toggleDisplay() { this.setState({ display: !this.state.display }); } render() { // change code below this line return ( &lt;div&gt; &lt;button onClick={this.toggleDisplay}&gt;Toggle Display&lt;/button&gt; {this.state.display &amp;&amp; &lt;h1&gt;Displayed!&lt;/h1&gt;} &lt;/div&gt; ); } }; This is the same xample using the ternary operator const inputStyle = { width: 235, margin: 5 } class CheckUserAge extends React.Component { constructor(props) { super(props); // change code below this line this.state = { input: &#39;&#39;, userAge: &#39;&#39; } // change code above this line this.submit = this.submit.bind(this); this.handleChange = this.handleChange.bind(this); } handleChange(e) { this.setState({ input: e.target.value, userAge: &#39;&#39; }); } submit() { this.setState({ userAge: this.state.input }); } render() { const buttonOne = &lt;button onClick={this.submit}&gt;Submit&lt;/button&gt;; const buttonTwo = &lt;button&gt;You May Enter&lt;/button&gt;; const buttonThree = &lt;button&gt;You Shall Not Pass&lt;/button&gt;; return ( &lt;div&gt; &lt;h3&gt;Enter Your Age to Continue&lt;/h3&gt; &lt;input style={inputStyle} type=&quot;number&quot; value={this.state.input} onChange={this.handleChange} /&gt;&lt;br /&gt; { this.state.userAge == &#39;&#39; ? buttonOne : this.state.userAge &gt;= 18 ? buttonTwo : buttonThree } &lt;/div&gt; ); } }; "],
["apis-and-microservices.html", "Chapter 4 APIs and microservices 4.1 NPM 4.2 Node.js and Express", " Chapter 4 APIs and microservices These are my notes from the APIs and microservices certification from FreeCodeCamp! 4.1 NPM The Node Package Manager (npm) is a command-line tool used by developers to share and control modules (or packages) of JavaScript code written for use with Node.js. When starting a new project, npm generates a package.json file. This file lists the package dependencies for your project. Since npm packages are regularly updated, the package.json file allows you to set specific version numbers for each dependency. This ensures that updates to a package don’t break your project. npm saves packages in a folder named nodemodules. These packages can be installed in two ways: globally in a root nodemodules folder, accessible by all projects. locally within a project’s own node_modules folder, accessible only to that project. Most developers prefer to install packages local to each project to create a separation between the dependencies of different projects. 4.1.1 package.json The file package.json is the center of any Node.js project or npm package. It stores information about your project just like the -section in a HTML document describes the content of a webpage. The package.json consists of a single JSON-object where information is stored in “key”: value-pairs. There are only two required fields in a minimal package.json - name and version - but it’s a good practice to provide additional information about your project that could be useful to future users or maintainers. &quot;author&quot; : &quot;Dominic Mullen&quot;, &quot;description&quot; : &quot;learning about npm&quot;, &quot;keywords&quot;: [ &quot;learning&quot;, &quot;npm&quot;, &quot;freecodecamp&quot;, &quot;backend&quot; ], &quot;license&quot;: &quot;MIT&quot;, &quot;version&quot;: &quot;1.5&quot;, &quot;dependencies&quot;: { &quot;moment&quot;: &quot;~2.10.2&quot;, &quot;package&quot;: &quot;^1.1.1&quot; } 4.1.1.1 SemVer Semantic Versioning is an industry standard for versioning software. Given a version number MAJOR.MINOR.PATCH, increment the: MAJOR version when you make incompatible API changes, MINOR version when you add functionality in a backwards-compatible manner, and PATCH version when you make backwards-compatible bug fixes. Including a ~ in &quot;moment&quot;: &quot;~2.10.2&quot; allows npm to look for and install any PATCH fixes. Including a ^ in &quot;moment&quot;: &quot;^2.10.2&quot; allows npm to look for and install any MINOR fixes. 4.2 Node.js and Express Node.js is a JavaScript tool that allows developers to write backend (server-side) programs in JavaScript. Node.js comes with a handful of built-in modules—small, independent programs—that help facilitate this purpose. Some of the core modules include: HTTP: a module that acts as a server File System: a module that reads and modifies files Path: a module for working with directory and file paths Assertion Testing: a module that checks code against prescribed constraints Express, while not included with Node.js, is another module often used with it. Express runs between the server created by Node.js and the frontend pages of a web application. Express also handles an application’s routing. Routing directs users to the correct page based on their interaction with the application. "],
["js30.html", "Chapter 5 JS30 5.1 Drumkit 5.2 JS Clock", " Chapter 5 JS30 These are my notes from Wes Bos’s free Javscript 30 course 5.1 Drumkit 5.1.1 Center div within div We need to add text-align: center to the parent div to center text horizontally. Then in the child div elements we add top 50% and position relative to center them vertically. .parent-div { text-align: center; } .child-div { top: 50%; position: relative; } 5.1.2 document.querySelectorAll Add a class to a div on keypress: This method returns a NodeList element so it’s necessary to use indexing to find the one we want. This is usually [0] if we’re using data attributes to search. Here we use querySelectorAll method to find the div where we set the data attribute data-key equal to the event.keyCode &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;div class=&#39;key&#39; id=&#39;key-1&#39; data-key=&#39;65&#39;&gt;&lt;h2&gt;A&lt;/h2&gt;&lt;p class=&#39;key-p&#39;&gt;CLAP&lt;/p&gt;&lt;/div&gt; &lt;script&gt; window.addEventListener(&#39;keypress&#39;, function(event){ console.log(event.keyCode); document.querySelectorAll(`[data-key=&#39;${event.keyCode}&#39;]`)[0].classList.add(&#39;key-press&#39;); &lt;/script&gt; &lt;/html&gt; 5.1.3 Event Bubbling When an event is triggered it will “bubble” up through its parent elements until it reaches the window. If it reaches any event handlers those will process if they match the event. When we have multiple children we typically add an event handler to their parent element so we only need to write the code once. Example of event bubbling &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;style type=&#39;text/css&#39;&gt; .styling { display: table-cell; border: 1px solid black; padding: 20px; text-align: center; } &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;div class=&#39;styling&#39; onclick=&#39;alert(&quot;DIV CLICKED&quot;)&#39;&gt;Div element &lt;span class=&#39;styling&#39; onclick=&#39;alert(&quot;Span clicked&quot;)&#39;&gt;Span element &lt;input type=&#39;button&#39; class=&#39;styling&#39; value=&#39;Click me!&#39; onclick=&#39;alert(&quot;button clicked&quot;)&#39;&gt; &lt;/span&gt; &lt;/div&gt; &lt;/body&gt; &lt;/html&gt; 5.1.3.1 ‘this’ in event bubbling this refers to the current element to which the event is bubbled. Example using this in event bubbling. Not a great example because of the for loop. &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;style type=&#39;text/css&#39;&gt; .styling { display: table-cell; border: 1px solid black; padding: 20px; text-align: center; } &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;div id=&#39;div1&#39; class=&#39;styling&#39; onclick=&quot;changeBorder()&quot;&gt;div1 &lt;div id=&#39;div2&#39; class=&#39;styling&#39; onclick =&quot;changeBorder()&quot;&gt;div2 &lt;div id=&#39;div3&#39; class=&#39;styling&#39;&gt;div3&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/body&gt; &lt;script&gt; let divElements = document.getElementsByTagName(&#39;div&#39;); for (let i =0; i &lt; divElements.length; i++) { divElements[i].onclick = function() { this.style.border = &#39;3px solid pink&#39;; alert(this.getAttribute(&#39;id&#39;) + &#39;color changed&#39;); }; } &lt;/script&gt; &lt;/html&gt; 5.1.3.2 Stop event bubbling In IE8 and earlier versions we use event.cancelBubble = true, with all other browsers we use event.stopPropogation() 5.1.4 Transition end event Similar to a click event - when an element transitions it fires off a transition end event that says “I’m finished transitioning”. In this case elements are scaling up by 1.1 and making the border larger. Each CSS property that transitions records its own event (there will likely be lots of transition events in adding / removing a class). In this example: this is always equal to what got called against it - in this case “addEventListener” was called against key –&gt; so this = key const keys = document.querySelectorAll(&#39;.key&#39;); // loop over the NodeList to add event listeners keys.forEach(key =&gt; key.addEventListener(&#39;transitionend&#39;, removeTransition)); function removeTransition(e) { console.log(e); // this shows a ton of events - one for each property if (e.propertyName !== &#39;transform&#39;) return; // skip the event console.log(this); // see what this is // this is always equal to what got called against it - in this case &quot;addEventListener&quot; was called against key --&gt; so this = key. }; 5.2 JS Clock 5.2.1 Center div using translate The translate() CSS function repositions an element in the horizontal and/or vertical directions. In this example we transform it by subtracting 50% of it’s width from the X-direction. Thus - left: 50% and transform(-50%) center it horizontally. The same is true vertically. &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;style&gt; .centered-div { background-color: black; position: absolute; height: 500px; width: 350px; top: 50%; left: 50%; transform: translate(-50%, -50%); } &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;div class=&#39;centered-div&#39;&gt;&lt;/div&gt; &lt;/body&gt; &lt;/html&gt; 5.2.2 Center div using flexbox body { display: flex; min-height: 100vh; align-items: center; } .clock { margin: auto; } "]
]
