[
["responsive-web-design-fcc.html", "Chapter 3 Responsive Web Design FCC 3.1 HTML and HTML5 3.2 CSS 3.3 Applied Visual Design 3.4 Applied Acessibility 3.5 Responsive Web Design 3.6 CSS Flexbox 3.7 CSS Grid (display: grid;)", " Chapter 3 Responsive Web Design FCC These are my notes from the Responsive Web Design certification from the FreeCodeCamp lessons 3.1 HTML and HTML5 Basic structure for each page: &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;!-- metadata elements --&gt; &lt;/head&gt; &lt;body&gt; &lt;!-- page contents --&gt; &lt;/body&gt; &lt;/html&gt; It’s best practice to include an alt tag w/ an image: &lt;img src='' alt='alt text&gt; Anchor element links to other pages &lt;a href=&quot;https://freecodecamp.org&quot;&gt;this links to freecodecamp.org&lt;/a&gt; To create an internal link, you assign a link’s href attribute to a hash symbol # plus the value of the id attribute for the element that you want to internally link to href=&quot;#&quot; to make a placeholder link You can nest an image in an anchor tag to make it a link &lt;input type='text' placeholder='dummy text'&gt; creates a box for user input text Example of a user submission form: &lt;form action=&quot;/submit-cat-photo&quot;&gt; &lt;input type=&quot;text&quot; placeholder=&quot;cat photo URL&quot; required&gt; &lt;button type=&quot;submit&quot;&gt;Submit&lt;/button&gt; &lt;/form&gt; Example of a radio button list: The for attribute allows us to link between the parent input elements &lt;label for=&#39;indoor&#39;&gt; &lt;input id=&#39;indoor&#39; type=&#39;radio&#39; name=&#39;indoor-outdoor&#39;&gt; Indoor &lt;/label&gt; &lt;label for=&#39;outdoor&#39;&gt; &lt;input id=&#39;outdoor&#39; type=&#39;radio&#39; name=&#39;indoor-outdoor&#39;&gt; Outdoor &lt;/label&gt; 3.2 CSS The idea behind CSS is that you can use a selector to target an HTML element in the DOM (Document Object Model) and then apply a variety of attributes to that element to change the way it is displayed on the page. You can apply CSS inline but it’s better to use an external stylesheet. You can also create a &lt;style&gt; block on the .html file but it’s not good practice. Element Ids: Add an id (id='meal-class-1) to an element to style it with that id’s CSS rules. An id is not reusable and should only be applied to one element. An id also has a higher specificity (importance) than a class so if both are applied to the same element and have conflicting styles, the styles of the id will be applied. Inheritance: Child elements inherit properties from their parent elements. Giving an element a class will override any conflicting rules that it inherits from its parent. If an element has multiple classes the last one in the CSS will take precedence. Giving an element a unique Id attribute (ex. #orange-text {color: orange;}) will take precedence over classes / parents. Giving an element inline CSS style (ex. &lt;h1 style='color: white'&gt;Title&lt;/h1&gt;) will take precedence over parent, classes and Ids. The last way that overrides everything is to add !important to a css rule (ex. .pink-text {color: pink !important}). Hexadecimal colors: In CSS, we can use 6 hexadecimal digits to represent colors, two each for the red (R), green (G), and blue (B) components. For example, #000000 is black and is also the lowest possible value. You can shorten this to one digit for each color, for example red = #F00. Instead of using six hexadecimal digits like you do with hex code, with RGB you specify the brightness of each color with a number between 0 and 255: orange - background-color: rgb(255, 165, 0); CSS Variables: CSS Variables are a powerful way to change many CSS style properties at once by changing only one value. To create a CSS Variable, you just need to give it a name with two dashes in front of it and assign it a value like this: --background-variable: orange. After you create your variable, you can assign its value to other CSS properties by referencing the name you gave it: background-color: var(--background-variable). When using your variable as a CSS property value, you can attach a fallback value that your browser will revert to if the given variable is invalid: --background-color: var(--background-variable, black). When you create a variable, it becomes available for you to use inside the element in which you create it. It also becomes available within any elements nested within it. This effect is known as cascading. CSS variables are often created in the :root element so they’re available everywhere throughout the page: :root {--variable: pink}. You can then re-define a variable within a class to overwrite the :root rule. Browser Fallbacks: When your browser parses the CSS of a webpage, it ignores any properties that it doesn’t recognize or support. For example, if you use a CSS variable to assign a background color on a site, Internet Explorer will ignore the background color because it does not support CSS variables. In that case, the browser will use whatever value it has for that property. If it can’t find any other value set for that property, it will revert to the default value, which is typically not ideal. This means that if you do want to provide a browser fallback, it’s as easy as providing another more widely supported value immediately before your declaration. That way an older browser will have something to fall back on, while a newer browser will just interpret whatever declaration comes later in the cascade. Example: .red-box { background: red; /*For older browswers*/ background: var(--red-color); height: 200px; width:200px; } .class . is the class selector # . is the id selector [attr=value] is the attribute selector. Example: [type=&#39;radio&#39;] { margin: 20px 0px 20px 0px; } include google fonts: &lt;link href=&quot;https://fonts.googleapis.com/css?family=Lobster&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot;&gt; we can have the browser choose from a list of fonts depending on which are available: p { font-family: Helvetica, sans-serif; } You can apply multiple classes to one element!!!! width:15px; doesn’t have a space between 15 and px - I think i’ve seen it differently elsewhere? border-radius: 15px; rounds the corners border-radius 50% makes it circular Element Description padding amount of space between the element’s content and it’s border. We can set this in one line (also margin). Ex. padding: 40px 40px 20px 20px (clockwise:top, right, bottom, left) margin controls the amount of space between an element’s border and surrounding elements. If you set a margin to a negative value it will increase the size of the element. 3.3 Applied Visual Design Element Description text-align: align text - left (default), right, center and justify (causes all lines of text except the last line to meet the left and right edges of the line box) width: relative length units (such as em), absolute length units (such as px), or as a percentage of its containing parent element font-weight font-weight: bold; is the same as wrapping text in &lt;strong&gt;&lt;/strong&gt;. Sets how thick or think characters are (ranges in abs values from 100:800 or so, and percentages can be used) text-decoration text-decoration: underline; is the same as wrapping text in &lt;u&gt;&lt;/u&gt; font-style font-style: italic; is the same as wrapping text in &lt;em&gt;&lt;/em&gt; &lt;hr&gt; create a horizontal line (self-closing tag) rgba() add opacity argument. background-color: rgba(45, 45, 45, 0.1) produces a dark gray that is nearly transparent font-size font-size. Units in px % - relative to window, and em (2em means 2 times the size) opacity adjusts the transparency. 0 is see through, 1 is opaque. text - transform lowercase, uppercase, capitalize (sentence-casing), initial, none, inherit (inherit parent props) line-height vertical amount of space between lines float does not actually use position, but sets the float property of an element. Floating elements are removed from the normal flow of a document and pushed to either the left or right of their containing parent element. z-index stack floating elements on top of each other, higher values take precedence margin move a block element horizontally (margin: auto; = center) display choose whether to display as block or inline hsl() Hue (color 0 red, 360 blue), saturation (amount of grey) lightness (amount of white 0 to black 100) linear-gradient() create a color gradient, the first arg specifies which direction the gradient moves. background: linear-gradient(0deg, #CCFFFF, #FFCCCC) background background: url(https://i.imgur.com/MJAkxbh.png); to add an image transform: transform: scale(2) doubles the element size. transform: transform: skewX(30deg); skews along the X-axis (e.g. square to rhombus) transform: transform: rotate(-45deg); rotates an element Box-shadow: Makes the &lt;div&gt; appear likes it’s floating on the page by adding shadow around it. The box-shadow property takes values for offset-x (how far to push the shadow horizontally from the element), offset-y (how far to push the shadow vertically from the element), blur-radius, spread-radius and a color value, in that order. The blur-radius and spread-radius values are optional. /* Multiple shadows with some blur */ box-shadow: 0 10px 20px rgba(0,0,0,0.19), 0 6px 6px rgba(0,0,0,0.23); Psuedo-classes: A pseudo-class is a keyword that can be added to selectors, in order to select a specific state of the element. /* When hovering over an anchor tag, change its color to red */ a:hover { color: red; } Positioning Relative:CSS treats each HTML element as its own box, which is usually referred to as the CSS Box Model. Block-level items automatically start on a new line (think headings, paragraphs, and divs) while inline items sit within surrounding content (like images or spans). The default layout of elements in this way is called the normal flow of a document, but CSS offers the position property to override it. When the position of an element is set to relative, it allows you to specify how CSS should move it relative to its current position in the normal flow of the page. It pairs with the CSS offset properties of left or right, and top or bottom. These say how many pixels, percentages, or ems to move the item away from where it is normally positioned. The following example moves the paragraph 10 pixels away from the bottom: p { /* Relative positions move away from top, bottom, left and right */ position: relative; bottom: 10px; } Absolute: The next option for the CSS position property is absolute, which locks the element in place relative to its parent container. Unlike the relative position, this removes the element from the normal flow of the document, so surrounding items ignore it. The CSS offset properties (top or bottom and left or right) are used to adjust the position. Fixed: locks an element relative to the browser window. Similar to absolute positioning, it’s used with the CSS offset properties and also removes the element from the normal flow of the document. Colors: Red (R), green (G), and blue (B) are called primary colors. Mixing two primary colors creates the secondary colors cyan (G + B), magenta (R + B) and yellow (R + G). Tertiary colors are the result of combining a primary color with one of its secondary color neighbors. For example, red (primary) and yellow (secondary) make orange. HSL () Shapes: Use CSS Styline to create a crescent moon shape: /* &lt;style&gt; .center { position: absolute; margin: auto; top: 0; right: 0; bottom: 0; left: 0; width: 100px; height: 100px; background-color: transparent; /* Change this to see the initial shape */ border-radius: 50%; box-shadow: 25px 10px 0px 0px blue; } &lt;/style&gt; &lt;div class=&quot;center&quot;&gt;&lt;/div&gt; */ Pseudo-elements: ::before and ::after pseudo-elements to function properly, they must have a defined content property. This property is usually used to add things like a photo or text to the selected element. When the ::before and ::after pseudo-elements are used to make shapes, the content property is still required, but it’s set to an empty string. 3.3.1 Animation: The animation properties control how the animation should behave and the @keyframes rule controls what happens during that animation. animation-name sets the name of the animation, which is later used by @keyframes to tell CSS which rules go with which animations; it uses percentages similarly to frames. 0% is at the beginning and 100% is at the end. Change the background color from blue to yellow in 3 seconds: /* #anim { animation-name: colorful; animation-duration: 3s; } @keyframes colorful { 0% { background-color: blue; } 100% { background-color: yellow; } } */ &lt;style&gt; button { border-radius: 5px; color: white; background-color: #0F5897; padding: 5px 10px 8px 10px; } button:hover { animation-name: background-color; animation-duration: 500ms; /* add your code below this line */ animation-fill-mode: forwards; /* add your code above this line */ } @keyframes background-color { 100% { background-color: #4791d0; } } &lt;/style&gt; &lt;button&gt;Register&lt;/button&gt; Animation Properties and Effects: Animation Property | Explanation ——————– | ————————————————- animation-name | name is referred to in @keyframes to link them animation-duration | animation-duration: 1s; animation-iteration-count | number of iterations (can be set to infinite) animation-timing-function | controls the speed at various point of the animation. linear is constant. animation-timinig-function: ease-in; is slow at the beginning and speeds up. Some animation effects: Animation Effect | Explanation ———- | ——————————————————————- opacity | make an element fade in and out Cubic-bezier function: In CSS animations, Bezier curves are used with the cubic-bezier function. The shape of the curve represents how the animation plays out. The curve lives on a 1 by 1 coordinate system. The X-axis of this coordinate system is the duration of the animation (think of it as a time scale), and the Y-axis is the change in the animation. The cubic-bezier function consists of four main points that sit on this 1 by 1 grid: p0, p1, p2, and p3. p0 and p3 are set for you - they are the beginning and end points which are always located respectively at the origin (0, 0) and (1, 1). You set the x and y values for the other two points, and where you place them in the grid dictates the shape of the curve for the animation to follow. This is done in CSS by declaring the x and y values of the p1 and p2 “anchor” points in the form: (x1, y1, x2, y2). Pulling it all together, here’s an example of a Bezier curve in CSS code: /* Equivalent to the &quot;linear&quot; keyword */ animation-timing-function: cubic-bezier(0.25, 0.25, 0.75, 0.75); 3.4 Applied Acessibility “Accessibility” generally means having web content and a user interface that can be understood, navigated, and interacted with by a broad audience. This includes people with visual, auditory, mobility, or cognitive disabilities. Websites should be open and accessible to everyone, regardless of a user’s abilities or resources. Some users rely on assistive technology such as a screen reader or voice recognition software. Other users may be able to navigate through a site only using a keyboard. Keeping the needs of various users in mind when developing your project can go a long way towards creating an open web. Having accessible web content is an ongoing challenge. A great resource for your projects going forward is the W3 Consortium’s Web Content Accessibility Guidelines (WCAG). They set the international standard for accessibility and provide a number of criteria you can use to check your work. All images are required to include alt text with HTML5. headers should have semantic / hierarchical meaning. main, header, footer, nav, article, and section can be used for increased readability from screen readers. &lt;article&gt; is for stand-alone content, &lt;section&gt; is for thematically related content. &lt;header&gt; wrap introductory information or navigation links for its parent tag &lt;nav&gt; wrap around the main navigation links in your page &lt;audio controls&gt; wrapping this around an audio element will create play buttons &lt;audio controls&gt;&lt;source src='https://s3.amazonaws.com/freecodecamp/screen-reader.mp3' type='audio/mpeg'&gt;&lt;/audio&gt; &lt;figure&gt; and &lt;figcaption&gt; Wrap a visual representation along with its caption: &lt;figure&gt; &lt;img src=&quot;roundhouseDestruction.jpeg&quot; alt=&quot;Photo of Camper Cat executing a roundhouse kick&quot;&gt; &lt;br&gt; &lt;figcaption&gt; Master Camper Cat demonstrates proper form of a roundhouse kick. &lt;/figcaption&gt; &lt;/figure&gt; Add a label on inputs where the for attribute matches the id attribute on input. This links them together. fieldset tag surrounds the entire grouping of radio buttons to achieve this. It often uses a legend tag to provide a description for the grouping, which is read by screen readers for each choice in the fieldset element. &lt;form&gt; &lt;fieldset&gt; &lt;legend&gt;Choose one of these three items:&lt;/legend&gt; &lt;input id=&quot;one&quot; type=&quot;radio&quot; name=&quot;items&quot; value=&quot;one&quot;&gt; &lt;label for=&quot;one&quot;&gt;Choice One&lt;/label&gt;&lt;br&gt; &lt;input id=&quot;two&quot; type=&quot;radio&quot; name=&quot;items&quot; value=&quot;two&quot;&gt; &lt;label for=&quot;two&quot;&gt;Choice Two&lt;/label&gt;&lt;br&gt; &lt;input id=&quot;three&quot; type=&quot;radio&quot; name=&quot;items&quot; value=&quot;three&quot;&gt; &lt;label for=&quot;three&quot;&gt;Choice Three&lt;/label&gt; &lt;/fieldset&gt; &lt;/form&gt; Date picker &lt;label for=&quot;input1&quot;&gt;Enter a date:&lt;/label&gt;&lt;input type=&quot;date&quot; id=&quot;input1&quot; name=&quot;input1&quot;&gt; Add datetime attributes for unambiguous dates: &lt;time datetime=&quot;2013-02-13&quot;&gt;last Wednesday&lt;/time&gt; text contrast ratio should be at least 4.5:1 (1:1 is the same color, 1:21 is white:black) Avoid putting anchor tags around phrases like “Click here” accessKey allows you to specify which keyboard button selects an element. &lt;button accesskey=&quot;b&quot;&gt;Important Button&lt;/button&gt; give elements a tabindex attribute to allow users to tab through them. &lt;div tabindex=0&gt;hi&lt;/div&gt;. A tabindex=-1 indicates an element is focusable but not available at the keyboard (like a new link). This also enables the psuedoclass :focus. Using positive numbers overrides the default order and allows you to specify what order elements will be focused on. Position Elements Off-screen: CSS’s magic can also improve accessibility on your page when you want to visually hide content meant only for screen readers. This happens when information is in a visual format (like a chart), but screen reader users need an alternative presentation (like a table) to access the data. CSS is used to position the screen reader-only elements off the visual area of the browser window. .sr-only { position: absolute; left: -10000px; width: 1px; height: 1px; top: auto; overflow: hidden; } 3.5 Responsive Web Design The page structure and CSS rules should be flexible to accommodate these differences. In general, design the page’s CSS to your target audience. If you expect most of your traffic to be from mobile users, take a ‘mobile-first’ approach. Then add conditional rules for larger screen sizes. A media query applies CSS rules if the condition is true. This query applies CSS rules if the width is &lt; 100px @media (max-width: 100px) { /* CSS Rules */ } “retina” - define your images as only half of their height/width in px viewport units vh: 3vh; 3% of the viewport’s height vw: 10vh; 10% of the viewport’s width vmin: 70vmin 70% of the viewport’s smaller dimension vmax: 100vmax 100% of the viewport’s bigger dimension Resonsive Images: The max-width property of 100% scales the image to fit the width of its container, but the image won’t stretch wider than its original width. Setting the display property to block changes the image from an inline element (its default), to a block element on its own line. The height property of auto keeps the original aspect ratio of the image. /* img { max-width: 100%; display: block; height: auto; } */ 3.6 CSS Flexbox A website’s User Interface (“UI”) has two components. First, there are the visual elements, such as colors, fonts, and images. Second, there is the placement or positioning of those elements. In Responsive Web Design, a UI layout must accommodate many different browsers and devices accessing the content. CSS3 introduced Flexible Boxes, or flexbox, to create page layouts for a dynamic UI. It is a layout mode that arranges elements in a predictable way for different screen sizes and browsers. While somewhat new, all popular modern browsers support flexbox. This section covers how to use flexbox and the different layout options it offers. 3.6.1 display: flex; Adding display: flex to an element turns it into a flex container. This makes it possible to align any children of that element into rows or columns. You do this by adding the flex-direction property to the parent item and setting it to row or column. Creating a row will align the children horizontally, and creating a column will align the children vertically. Other options for flex-direction are row-reverse and column-reverse. The default value for the flex-direction property is row. /* &lt;style&gt; #box-container { /* remove flex to see what they look like originally */ display: flex; flex-direction: row-reverse; height: 500px; } #box-1 { background-color: dodgerblue; width: 50%; height: 50%; } #box-2 { background-color: orangered; width: 50%; height: 50%; } &lt;/style&gt; &lt;div id=&quot;box-container&quot;&gt; &lt;div id=&quot;box-1&quot;&gt;&lt;/div&gt; &lt;div id=&quot;box-2&quot;&gt;&lt;/div&gt; &lt;/div&gt; */ 3.6.2 justify-content A flex container set as a column places the flex items in a vertical stack from top-to-bottom. For each, the direction the flex items are arranged is called the main axis. For a row, this is a horizontal line that cuts through each item. And for a column, the main axis is a vertical line through the items. justify-content: center; aligns all the flex items to the center inside the container flex-end: row - pushes to the right, column - pushes to bottom space-between - aligns items evenly, first and last items are locked to edges space-around - similar to between except first and last items are not locked to edges 3.6.3 align-items Flex containers also have a cross axis which is the opposite of the main axis. For rows, the cross axis is vertical and for columns, the cross axis is horizontal. flex-start: aligns items to the start of the flex container. For rows, this aligns items to the top of the container. For columns, this aligns items to the left of the container. flex-end: aligns items to the end of the flex container. For rows, this aligns items to the bottom of the container. For columns, this aligns items to the right of the container. center: align items to the center. For rows, this vertically aligns items (equal space above and below the items). For columns, this horizontally aligns them (equal space to the left and right of the items). stretch: stretch the items to fill the flex container. For example, rows items are stretched to fill the flex container top-to-bottom. baseline: align items to their baselines. Baseline is a text concept, think of it as the line that the letters sit on. 3.6.4 flex-wrap Using the flex-wrap property, it tells CSS to wrap items. This means extra items move into a new row or column. The break point of where the wrapping happens depends on the size of the items and the size of the container. nowrap: this is the default setting, and does not wrap items. wrap: wraps items from left-to-right if they are in a row, or top-to-bottom if they are in a column. wrap-reverse: wraps items from bottom-to-top if they are in a row, or right-to-left if they are in a column. 3.6.5 flex-shrink, grow, and basis flex-shrink allows an item to shrink if the flex container is too small. Items shrink when the width of the parent container is smaller than the combined widths of all the flex items within it. The flex-shrink property takes numbers as values. The higher the number, the more it will shrink compared to the other items in the container. For example, if one item has a flex-shrink value of 1 and the other has a flex-shrink value of 3, the one with the value of 3 will shrink three times as much as the other. The opposite of flex-shrink is the flex-grow property. Recall that flex-shrink controls the size of the items when the container shrinks. The flex-grow property controls the size of items when the parent container expands. flex-basis property specifies the initial size of the item before CSS makes adjustments with flex-shrink or flex-grow. It takes em, px, and % units. 3.6.6 flex shorthand For example, flex: 1 0 10px; will set the item to flex-grow: 1;, flex-shrink: 0;, and flex-basis: 10px; 3.6.7 order Tells CSS the order of flex items. They are in the HTML order by default. order takes numbers as values, and negatives can be used. 3.6.8 align-self Allows you to adjust each flex item’s alignments individually. Accepts the same values as align-items 3.7 CSS Grid (display: grid;) CSS Grid helps you easily build complex web designs. It works by turning an HTML element into a grid container with rows and columns for you to place children elements where you want within the grid. Turn any HTML element into a grid container by setting its display property to grid (display:grid). This gives you the ability to use all the other properties associated with CSS Grid. In CSS Grid, the parent element is referred to as the container and its children are called items. grid-template-columns: 50px 50px; - creates two columns that are 50px wide grid-template-rows: 50px 50px; -creates two rows that are 50px tall grid-template-columns: auto 50px 10% 2fr 1fr; This snippet creates five columns. The first column is as wide as its content, the second column is 50px, the third column is 10% of its container, and for the last two columns; the remaining space is divided into three sections, two are allocated for the fourth column, and one for the fifth. grid-column-gap: 10px; - creates 10px of empty space between columns grip-gap 5px 10px: (shorthand). one value = gap between rows and columns. two values = rows then columns &lt;style&gt; .d1{background:LightSkyBlue;} .d2{background:LightSalmon;} .d3{background:PaleTurquoise;} .d4{background:LightPink;} .d5{background:PaleGreen;} .container { font-size: 40px; width: 100%; background: LightGray; display: grid; grid-template-columns: 100px 100px 100px; grid-template-rows: 50px 50px; grid-column-gap: 10px; grid-row-gap: 5px; } &lt;/style&gt; &lt;div class=&quot;container&quot;&gt; &lt;div class=&quot;d1&quot;&gt;1&lt;/div&gt; &lt;div class=&quot;d2&quot;&gt;2&lt;/div&gt; &lt;div class=&quot;d3&quot;&gt;3&lt;/div&gt; &lt;div class=&quot;d4&quot;&gt;4&lt;/div&gt; &lt;div class=&quot;d5&quot;&gt;5&lt;/div&gt; &lt;/div&gt; 3.7.1 grid-column / grid-row The hypothetical horizontal and vertical lines that create the grid are referred to as lines. These lines are numbered starting with 1 at the top left corner of the grid and move right for columns and down for rows, counting upward. To control the amount of columns an item will consume, you can use the grid-column property in conjunction with the line numbers you want the item to start and stop at. /* This item will span from the first to third &quot;line&quot; in the grid - spanning columns one and two */ grid-column: 1 / 3; 3.7.2 Cell alignment (justify-self, align-self, and justify-items) The content of each item is located in a box which is referred to as a cell. You can align the content’s position within its cell horizontally using the justify-self property on a grid item. By default, this property has a value of stretch, which will make the content fill the whole width of the cell. align-self justifies elements vertically, it accepts all the same arguments. justify-self: start; aligns content at left of cell (top for align-self) justify-self: center; centers content justify-self: end; right-aligns (end for align-self) justify-items: center - applies to both rows and columns 3.7.3 grid-template-areas This code merges the top three cells together into an area named header, the bottom three cells into a footer area, and it makes two areas in the middle row; advert and content. Every word in the code represents a cell and every pair of quotation marks represent a row. In addition to custom labels, you can use a period (.) to designate an empty cell in the grid. grid-template-areas: &quot;header header header&quot; &quot;. content content&quot; &quot;footer footer footer&quot;; Once we have defined a grid-template-area we can place items (CSS rules) in areas by giving them the grid:area property followed by the names we want to apply it to. .item5 { background: PaleGreen; grid-area: footer; } We can also use grid-area even if areas haven’t been defined. The following stands for horizontal line to start at / vertical line to start at / horizontal line to end at / vertical line to end at. item1 { grid-area: 1/1/2/4; } 3.7.4 repeat() We can use the .repeat() function to reduce code. The first argument is # of repetitions and the second argument is the input. grid-template-columns: repeat(2, 1fr 50px) 20px; 3.7.5 minmax() This function is used to limit the size of the items when the container changes. This creates two columns; the first is 100px wide, and the second has the minimum width of 50px and the maximum width of 200px grid-template-columns: 100px minmax(50px, 200px); 3.7.6 auto-fill and auto-fit You can create flexible layouts when combining auto-fill with minmax. repeat(auto-fill, minmax(60px, 1fr)); Auto-fit works almost identically except if your container can’t fit all your items on one row, it will move them down to a new one. 3.7.7 Grids within grids &lt;style&gt; .container { font-size: 1.5em; min-height: 300px; width: 100%; background: LightGray; display: grid; grid-template-columns: auto 1fr; grid-template-rows: auto 1fr auto; grid-gap: 10px; grid-template-areas: &quot;advert header&quot; &quot;advert content&quot; &quot;advert footer&quot;; } .item1 { background: LightSkyBlue; grid-area: header; } .item2 { background: LightSalmon; grid-area: advert; } .item3 { background: PaleTurquoise; grid-area: content; /* enter your code below this line */ display: grid; grid-template-columns: auto 1fr; /* enter your code above this line */ } .item4 { background: lightpink; grid-area: footer; } .itemOne { background: PaleGreen; } .itemTwo { background: BlanchedAlmond; } &lt;/style&gt; &lt;div class=&quot;container&quot;&gt; &lt;div class=&quot;item1&quot;&gt;header&lt;/div&gt; &lt;div class=&quot;item2&quot;&gt;advert&lt;/div&gt; &lt;div class=&quot;item3&quot;&gt; &lt;div class=&quot;itemOne&quot;&gt;paragraph1&lt;/div&gt; &lt;div class=&quot;itemTwo&quot;&gt;paragraph2&lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;item4&quot;&gt;footer&lt;/div&gt; &lt;/div&gt; "]
]
